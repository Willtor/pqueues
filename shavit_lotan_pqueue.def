/* Fixed height skiplist: A skiplist implementation with an array of "next"
 * nodes of fixed height.
 */

import "stdio.h";

typedef state_t = enum
    | ACTIVE
    | DELETED
    ;

typedef node =
    { val      i64,            // Value.
      state volatile state_t,  // Logical deletion state.
      toplevel i32,            // Height.
      next     [20]*node       // Follow-list of nodes.
    };

export opaque
typedef sh_pqueue =
    { head  node,
      tail  node
    };

/** Print out the contents of the skip list along with node heights.
 */
export
def sh_pqueue_print (set *sh_pqueue) -> void
begin
    var node = set.head.next[0];
    while unmark(node) != &set.tail do
        if is_marked(node.next[0]) then
            node = unmark(node).next[0];
        else
            node = unmark(node);
            printf("node[%d]: %lld\n", node.toplevel, node.val);
            node = node.next[0];
        fi
    od
end

/** Return a new fixed-height skip list.
 */
export
def sh_pqueue_create () -> *sh_pqueue
begin
    var sh_pqueue = new sh_pqueue;
    sh_pqueue.head.val = 0x8000000000000000I64;
    sh_pqueue.tail.val = 0x7FFFFFFFFFFFFFFFI64;
    for var i = 0; i < 20; ++i do
        sh_pqueue.head.next[i] = &sh_pqueue.tail;
        sh_pqueue.tail.next[i] = nil;
    od
    return sh_pqueue;
end

/** Return whether the skip list contains the value.
 */
export
def sh_pqueue_contains (set *sh_pqueue, x i64) -> bool
begin
    // FIXME: Nir's book does this differently.  Figure out whether this
    // still works and maybe replace.
    var node = &set.head;
    for var level = 19; level >= 0; --level do
        var next = unmark(node.next[level]);
        while next.val <= x do
            node = next;
            next = unmark(node.next[level]);
        od
        if node.val == x then
            if !is_marked(node.next[0]) then return node.state == ACTIVE; fi
            return false;
        fi
    od
    return false;
end

/** Add a node, lock-free, to the skiplist.
 */
export
def sh_pqueue_add (seed *u64, set *sh_pqueue, x i64) -> bool
begin
    var preds [20]*node;
    var succs [20]*node;
    var toplevel = random_level(seed, 20);
    while true do
        if true == find(set, x, preds, succs) then
            return false;
        else
            var node = new node;
            node.val = x;
            node.toplevel = toplevel;
            node.state = ACTIVE;
            for var i = 0; i <= toplevel; ++i do
                node.next[i] = unmark(succs[i]);
            od
            var pred = preds[0];
            var succ = succs[0];
            if !__builtin_cas(&pred.next[0], unmark(succ), node) then
                delete node;
                continue;
            fi
            for var i = 1; i < toplevel; ++i do
                while true do
                    pred = preds[i];
                    succ = succs[i];
                    if __builtin_cas(&pred.next[i], unmark(succ), node) then
                        break;
                    fi
                    find(set, x, preds, succs);
                od
            od
            return true;
        fi
    od
end

/** Remove a node, lock-free, from the skiplist.
 */
export
def sh_pqueue_remove (set *sh_pqueue, x i64) -> bool
begin
    var preds [20]*node;
    var succs [20]*node;
    var succ *node;
    while true do
        if false == find(set, x, preds, succs) then
            return false;
        else
            var node_to_remove = succs[0];
            var marked bool;
            for var level = node_to_remove.toplevel;
                level >= 1;
                --level
            do
                succ = node_to_remove.next[level];
                marked = is_marked(succ);
                while !marked do
                    __builtin_cas(&node_to_remove.next[level], unmark(succ),
                                  mark(succ));
                    succ = node_to_remove.next[level];
                    marked = is_marked(succ);
                od
            od
            succ = node_to_remove.next[0];
            marked = is_marked(succ);
            while true do
                var i_marked_it = __builtin_cas(&node_to_remove.next[0],
                                                unmark(succ), mark(succ));
                succ = succs[0].next[0];
                marked = is_marked(succ);
                if i_marked_it then
                    // FIXME: succs[0]?  Should retire node_to_remove?
                    retire succs[0];
                    find(set, x, preds, succs);
                    return true;
                elif marked then
                    return false;
                fi
            od
        fi
    od
end

/** Remove a node, lock-free, from the skiplist.  Leak the memory.
 */
export
def sh_pqueue_leaky_remove (set *sh_pqueue, x i64) -> bool
begin
    var preds [20]*node;
    var succs [20]*node;
    var succ *node;
    while true do
        if false == find(set, x, preds, succs) then
            return false;
        else
            var node_to_remove = succs[0];
            var marked bool;
            for var level = node_to_remove.toplevel;
                level >= 1;
                --level
            do
                succ = node_to_remove.next[level];
                marked = is_marked(succ);
                while !marked do
                    __builtin_cas(&node_to_remove.next[level], unmark(succ),
                                  mark(succ));
                    succ = node_to_remove.next[level];
                    marked = is_marked(succ);
                od
            od
            succ = node_to_remove.next[0];
            marked = is_marked(succ);
            while true do
                var i_marked_it = __builtin_cas(&node_to_remove.next[0],
                                                unmark(succ), mark(succ));
                succ = succs[0].next[0];
                marked = is_marked(succ);
                if i_marked_it then
                    find(set, x, preds, succs);
                    return true;
                elif marked then
                    return false;
                fi
            od
        fi
    od
end

/** Pop the front node from the list.  Return true iff there was a node to pop.
 *  Leak the memory.
 */
export
def sh_pqueue_leaky_pop_min (set *sh_pqueue) -> bool
begin
    var curr = set.head.next[0];
    for var curr = set.head.next[0]; curr != &set.tail; curr = curr.next[0] do
        if curr.state == DELETED then
            continue;
        fi
        var res = __builtin_cas(&curr.state, ACTIVE, DELETED);
        if res then 
            // Physically delete the node now.
            return sh_pqueue_leaky_remove(set, curr.val);
        fi
    od
    return false;
end

/** Pop the front node from the list.  Return true iff there was a node to pop.
 *  Don't leak the memory.
 */
export
def sh_pqueue_pop_min (set *sh_pqueue) -> bool
begin
    var curr = set.head.next[0];
    for var curr = set.head.next[0]; curr != &set.tail; curr = curr.next[0] do
        if curr.state == DELETED then
            continue;
        fi
        var res = __builtin_cas(&curr.state, ACTIVE, DELETED);
        if res then 
            // Physically delete the node now.
            return sh_pqueue_remove(set, curr.val);
        fi
    od
    return false;
end

def fast_rand (seed *u64) -> u64
begin
    var val = seed[0];
    if val == 0 then val = 1; fi

    val ^= val << 6;
    val ^= val >> 21;
    val ^= val << 7;

    seed[0] = val;
    return val;
end

def random_level (seed *u64, max u32) -> u32
begin
    var level = 1;
    while fast_rand(seed) % 2 == 0 && level < max do
        ++level;
    od
    return level - 1;
end

def find (set *sh_pqueue,
          key i64,
          preds [20]*node,
          succs [20]*node) -> bool
begin
    var marked, snip bool;
    var pred, curr, succ *node = nil, nil, nil;
retry:
    while true do
        pred = &set.head;
        for var level = 19; level >= 0; --level do
            curr = unmark(pred.next[level]);
            while true do
                { succ, marked } = ref_and_markbit(curr.next[level]);
                while marked do
                    snip = __builtin_cas(&pred.next[level], curr, succ);
                    if !snip then goto retry; fi
                    curr = unmark(pred.next[level]);
                    { succ, marked } = ref_and_markbit(curr.next[level]);
                od
                if curr.val < key then
                    pred = curr;
                    curr = succ;
                else
                    break;
                fi
            od
            preds[level] = pred;
            succs[level] = curr;
        od
        return curr.val == key;
    od
end

def ref_and_markbit (ptr *node) -> { *node, bool } =
    { unmark(ptr), is_marked(ptr) };

def mark (ptr *node) -> *node =
    cast(type *node, 0x1I64 | cast(type i64, ptr));

def unmark (ptr *node) -> *node =
    cast(type *node, 0xFFFFFFFFFFFFFFFEI64 & cast(type i64, ptr));

def is_marked (ptr *node) -> bool =
    cast(type bool, 0x1I64 & cast(type i64, ptr));
import "forkscan.defi";
import "malloc.h";
import "pthread.h";
import "stdio.h";
import "time.h";
import "stdlib.h";
import "thread_pinner.h"; 

// Sets with naive pop min:
import "fhsl_lf.defi";
import "fhsl_b.defi";
import "fhsl_tx.defi";
import "c_fhsl_lf.h";
// Pqueue data structures:
import "sl_pq.defi";
import "c_sl_pq.h";
import "spray_pq.defi";
import "spray_tx_pq.defi";
import "c_spray_pq.h";
import "c_spray_pq_tx.h";
import "lj_pq.defi";
import "c_lj_pq.h";
import "mq_locked_btree.defi";

typedef benchmark_t = enum
    | FHSL_LF
    | FHSL_B
    | C_FHSL_LF
    | FHSL_TX
    | SPRAY
    | SPRAY_TX
    | C_SPRAY
    | C_SPRAY_TX
    | SL_PQ
    | C_SL_PQ
    | LJ_PQ
    | C_LJ_PQ
    | MQ_LOCKED_BTREE
    ;

typedef memory_policy_t = enum
    | POLICY_LEAKY
    | POLICY_RETIRE
    ;

typedef state_t = enum
    | STATE_WAIT
    | STATE_RUN
    | STATE_END
    ;


typedef config_t =
    {
        benchmark      benchmark_t,
        policy         memory_policy_t,
        csv            bool,
        duration_s     i32,
        thread_count   i32,
        init_size      i64,
        upper_bound    i64,
        pqueue          *void
    };

typedef stats_t =
    {
        insert_attempts   i64,
        insert_successes  i64,
        remove_attempts   i64,
        remove_successes  i64
    };

typedef per_thread_data_t =
    {
        config         *config_t,
        id             i32,
        state          volatile *state_t,
        stats          stats_t
    };

typedef init_thread_data_t =
    {
        config        *config_t,
        total_threads i64,
        id            i64
    };

/** Return the time in seconds.
 */
def hires_timer () -> f64
begin
    var ts timespec;
    // FIXME: Need a convenient way to access C MACROs.
    if 0 != clock_gettime(/*CLOCK_MONOTONIC=*/1, &ts) then
        fprintf(stderr, "fatal: clock failed.\n");
        exit(1);
    fi
    var sec = cast f64 (ts.tv_sec);
    var nsec = cast f64 (ts.tv_nsec);
    return sec + nsec / (1000.0 * 1000.0 * 1000.0);
end

def fast_rand (seed *u64) -> u64
begin
    var val = seed[0];
    if val == 0 then val = 1; fi

    val ^= val << 6;
    val ^= val >> 21;
    val ^= val << 7;

    seed[0] = val;
    return val;
end

def string_of_benchmark (b benchmark_t) -> *char
begin
    switch b with
    xcase FHSL_LF: return "fhsl_lf";
    xcase C_FHSL_LF: return "c_fhsl_lf";
    xcase FHSL_B: return "fhsl_b";
    xcase FHSL_TX: return "fhsl_tx";
    xcase SPRAY: return "spray";
    xcase SPRAY_TX: return "spray_tx";
    xcase C_SPRAY: return "c_spray";
    xcase C_SPRAY_TX: return "c_spray_tx";
    xcase SL_PQ: return "sl_pq";
    xcase C_SL_PQ: return "c_sl_pq";
    xcase LJ_PQ: return "lj_pq";
    xcase C_LJ_PQ: return "c_lj_pq";
    xcase MQ_LOCKED_BTREE: return "mq_locked_btree";
    xcase _: return "unknown benchmark";
    esac
end

def string_of_policy (p memory_policy_t) -> *char
begin
    switch p with
    xcase POLICY_LEAKY: return "leaky";
    xcase POLICY_RETIRE: return "retire";
    xcase _: return "unknown policy";
    esac
end

def help (bench *char) -> void
begin
    printf("Usage: %s [OPTIONS]\n", bench);
    printf("  -h, --help: This help message.\n");
    printf("  -t <n>: Set the number of threads. (default = 1)\n");
    printf("  -d <n>: Benchmark duration in seconds. (default = 1)\n");
    printf("  -b <benchmark>: Set the benchmark. (default = fhsl_lf)\n");
    printf("     * fhsl_lf: Fixed-height skip list; lock-free.\n");
    printf("     * c_fhsl_lf: Fixed-height skip list written in C; lock-free.\n");
    printf("     * fhsl_b: Fixed-height skip list; blocking.\n");
    printf("     * fhsl_tx: Fixed-height skip list; transactional.\n");
    printf("     * sl_pq: Fixed-height skip list Shavit Lotan priority pqueue written in C; lock-free underneath.\n");
    printf("     * c_sl_pq: Fixed-height skip list Shavit Lotan priority pqueue written in C; lock-free underneath.\n");
    printf("     * spray: Fixed-height skip list based priority queue; lock-free with spray delete min.\n");
    printf("     * spray_tx: Transactional fixed-height skip list based priority queue; spray delete min.\n");
    printf("     * c_spray: Fixed-height skip list based priority pqueue written in C; lock-free with spray delete min.\n");
    printf("     * c_spray_tx: Fixed-height skip list based priority pqueue written in C; transactional with spray delete min.\n");
    printf("     * lj_pq: Fixed-height skip list based priority queue; lock-free with Linden Jonsson delete min.\n");
    printf("     * c_lj_pq: Fixed-height skip list based priority pqueue written in C; lock-free with Linden Jonsson delete min.\n");
    printf("     * mq_locked_btree: Multiqueue with a locked btree base.\n");
    printf("  -p <mem_policy>: Set the memory policy. (default = leaky)\n");
    printf("     * leaky: Leak removed nodes.\n");
    printf("     * retire: Use Forkscan to reclaim removed nodes.\n");
    printf("  -i <n>: Initial pqueue size. (default = 256)\n");
    printf("  -r <n>: Range upper bound [0-n). (default = 512)\n");
    printf("  --csv: Generate a comma-separated value summary.\n");
    exit(127);
end

/** Parse an i32 from txt in the range [low, high].  The err text is the
 *  command line option and is used in case of failure.
 */
def read_i32 (low i32, high i32, txt *char, err *char) -> i32
begin
    var n = atoi(txt);
    if n < low || n > high then
        fprintf(stderr, "error: %s requires an argument between %d and %d\n",
                err, low, high);
        exit(1);
    fi
    return n;
end

/** Parse an i64 from txt in the range [low, high].  The err text is the
 *  command line option and is used in case of failure.
 */
def read_i64 (low i64, high i64, txt *char, err *char) -> i64
begin
    var n = atoll(txt);
    if n < low || n > high then
        fprintf(stderr, "error: %s requires an argument between %lld and %lld\n",
                err, low, high);
        exit(1);
    fi
    return n;
end

def read_args (argc i32, argv **char) -> config_t
begin
    var config config_t =
        { FHSL_LF, POLICY_LEAKY, false, 1, 1, 256, 512, nil };

    for var i = 1; i < argc; ++i do
        switch argv[i] with
        xcase "-h":
        ocase "--help":
            help(argv[0]); // no return.
        xcase "-t":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -t requires an argument.\n");
                exit(1);
            fi
            config.thread_count = read_i32(1, 128, argv[i], "-t");
        xcase "-d":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -d requires an argument.\n");
                exit(1);
            fi
            config.duration_s = read_i32(1, 999, argv[i], "-d");
        xcase "-b":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -b requires an argument.\n");
                exit(1);
            fi
            switch argv[i] with
            xcase "fhsl_lf": config.benchmark = FHSL_LF;
            xcase "c_fhsl_lf": config.benchmark = C_FHSL_LF;
            xcase "fhsl_tx": config.benchmark = FHSL_TX;
            xcase "fhsl_b": config.benchmark = FHSL_B;
            xcase "spray": config.benchmark = SPRAY;
            xcase "c_spray": config.benchmark = C_SPRAY;
            xcase "c_spray_tx": config.benchmark = C_SPRAY_TX;
            xcase "spray_tx": config.benchmark = SPRAY_TX;
            xcase "sl_pq": config.benchmark = SL_PQ;
            xcase "c_sl_pq": config.benchmark = C_SL_PQ;
            xcase "lj_pq": config.benchmark = LJ_PQ;
            xcase "c_lj_pq": config.benchmark = C_LJ_PQ;
            xcase "mq_locked_btree": config.benchmark = MQ_LOCKED_BTREE;
            xcase _:
                printf("unknown benchmark: %s\n", argv[i]);
                exit(1);
            esac
        xcase "-p":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -b requires an argument.\n");
                exit(1);
            fi
            switch argv[i] with
            xcase "leaky": config.policy = POLICY_LEAKY;
            xcase "retire":
            ocase "forkscan":
                config.policy = POLICY_RETIRE;
            xcase _:
                printf("unknown memory policy: %s\n", argv[i]);
                exit(1);
            esac
        xcase "-i":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -i requires an argument.\n");
                exit(1);
            fi
            config.init_size =
                read_i64(1, 0x7FFFFFFFFFFFFFFFI64, argv[i], "-i");
        xcase "-r":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -r requires an argument.\n");
                exit(1);
            fi
            config.upper_bound =
                read_i64(1, 0x7FFFFFFFFFFFFFFFI64, argv[i], "-r");
        xcase "--csv":
            config.csv = true;
        xcase _:
            printf("unknown option: %s\n", argv[i]);
            exit(1);
        esac
    od

    return config;
end

def verify_config (config *config_t) -> void
begin
    // Be sure the configuration is valid -- i.e., does the given data
    // structure support the requested memory policy, etc.?

    switch { config.benchmark, config.policy } with
    xcase { FHSL_LF, POLICY_LEAKY }:
    ocase { FHSL_LF, POLICY_RETIRE }:
    ocase { C_FHSL_LF, POLICY_LEAKY }:
    ocase { C_FHSL_LF, POLICY_RETIRE }:
    ocase { FHSL_TX, POLICY_LEAKY }:
    ocase { SL_PQ, POLICY_LEAKY }:
    ocase { SL_PQ, POLICY_RETIRE }:
    ocase { SPRAY, POLICY_LEAKY }:
    ocase { SPRAY, POLICY_RETIRE }:
    ocase { SPRAY_TX, POLICY_LEAKY }:
    ocase { C_SPRAY, POLICY_LEAKY }:
    ocase { C_SPRAY, POLICY_RETIRE }:
    ocase { C_SPRAY_TX, POLICY_LEAKY }:
    ocase { C_SL_PQ, POLICY_LEAKY }:
    ocase { C_SL_PQ, POLICY_RETIRE }:
    ocase { LJ_PQ, POLICY_LEAKY }:
    ocase { LJ_PQ, POLICY_RETIRE }:
    ocase { C_LJ_PQ, POLICY_LEAKY }:
    ocase { MQ_LOCKED_BTREE, _ }:
    xcase _:
        printf("Unsupported configuration:\n");
        printf("  benchmark: %s\n  policy: %s\n",
               string_of_benchmark(config.benchmark),
               string_of_policy(config.policy));
        printf("No implementation for this combination.\n");
        exit(1);
    esac
end

def print_config (config *config_t) -> void
begin
    printf("Benchmark configuration\n");
    printf("--------- -------------\n");
    printf("  benchmark    : %s\n", string_of_benchmark(config.benchmark));
    printf("  mem_policy   : %s\n", string_of_policy(config.policy));
    printf("  duration (s) : %d\n", config.duration_s);
    printf("  thread count : %d\n", config.thread_count);
    printf("  initial size : %lld\n", config.init_size);
    printf("  range        : [0-%lld)\n", config.upper_bound);

    puts(""); // blank line.
end

def success_rate (attempts i64, successes i64) -> f64
begin
    if attempts == 0 then return 0.0F64; fi
    return cast f64 (successes) * 100.0F64 / cast f64 (attempts);
end

def print_stats (stats *stats_t, runtime f64) -> void
begin
    var total_ops i64 = 0;
    printf("  insert-attempts    : %lld\n", stats.insert_attempts);
    printf("  insert-successes   : %lld (%.1f%%)\n", stats.insert_successes,
           success_rate(stats.insert_attempts, stats.insert_successes));
    printf("  inserts-per-second : %lld\n",
           cast i64 (stats.insert_successes / runtime));
    printf("  remove-attempts    : %lld\n", stats.remove_attempts);
    printf("  remove-successes   : %lld (%.1f%%)\n", stats.remove_successes,
           success_rate(stats.remove_attempts, stats.remove_successes));
    printf("  removes-per-second : %lld\n",
           cast i64 (stats.remove_successes / runtime));

    total_ops = stats.insert_successes + stats.remove_successes;

    printf("  total-operations   : %lld\n", total_ops);
    printf("  ops-per-second     : %lld\n",
           cast i64 (total_ops / runtime));
end

def print_csv (config *config_t, stats *stats_t, runtime f64) -> void
begin
    puts("# fields: name, benchmark, policy, threads, init_size, upper_bound, ops/sec");

    var total_ops = stats.insert_successes + stats.remove_successes;

    printf("pqueue_bench, %s, %s, %d, %lld, %lld, %lld\n",
           string_of_benchmark(config.benchmark),
           string_of_policy(config.policy),
           config.thread_count,
           config.init_size,
           config.upper_bound,
           cast i64 (total_ops / runtime));
end

def thread (arg *void) -> *void
begin
    var seed = cast u64 (time(nil));
    var ptd = cast volatile *per_thread_data_t (arg);
    var stats stats_t = { 0, 0, 0, 0 };
    var config *config_t = ptd.config;
    var bench = config.benchmark;
    var policy = config.policy;
    var pqueue = config.pqueue;

    printf("[started thread %d]\n", ptd.id);
    while ptd.state[0] == STATE_WAIT do
        // busy-wait.
    od
    var insert_action = (fast_rand(&seed) % 100) < 50;
    
    while ptd.state[0] == STATE_RUN do
        var val i64 = fast_rand(&seed) % config.upper_bound;
        switch bench with
/***************************************************************************/
/*                    fixed-height skip list, lock free                    */
/***************************************************************************/
        
        xcase FHSL_LF:
            if insert_action then
                stats.insert_attempts++;
                if fhsl_lf_add(&seed, pqueue, val) then
                    stats.insert_successes++;
                    insert_action = false;
                fi
            else // insert_action == false.
                stats.remove_attempts++;
                if policy == POLICY_LEAKY then
                    if fhsl_lf_leaky_pop_min(pqueue) then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                else
                    // policy = POLICY_RETIRE
                    if fhsl_lf_pop_min(pqueue) then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                fi
            fi
            
/***************************************************************************/
/*                  C fixed-height skip list, lock free                    */
/***************************************************************************/
        
        xcase C_FHSL_LF:
            if insert_action then
                stats.insert_attempts++;
                if c_fhsl_lf_add(&seed, pqueue , val) == 1 then
                    stats.insert_successes++;
                    insert_action = false;
                fi
            else // insert_action == false.
                stats.remove_attempts++;
                if policy == POLICY_LEAKY then
                    if c_fhsl_lf_pop_min_leaky(pqueue) == 1 then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                else
                    // policy = POLICY_RETIRE
                    if c_fhsl_lf_pop_min(pqueue) == 1 then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                fi
            fi

/***************************************************************************/
/*                 fixed-height skip list, transactional                   */
/***************************************************************************/

        xcase FHSL_TX:
            if insert_action then
                stats.insert_attempts++;
                if fhsl_tx_add(&seed, pqueue, val) then
                    stats.insert_successes++;
                    insert_action = false;
                fi
            else // insert_action == false.
                stats.remove_attempts++;
                if policy == POLICY_LEAKY then
                    if fhsl_tx_leaky_pop_min(pqueue) then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                fi
            fi

/***************************************************************************/
/*           Shavit-Lotan PQ with underlying lock-free skip-list           */
/***************************************************************************/

        xcase SL_PQ:
            if insert_action then
                stats.insert_attempts++;
                if sl_pq_add(&seed, pqueue, val) then
                    stats.insert_successes++;
                    insert_action = false;
                fi
            else // insert_action == false.
                stats.remove_attempts++;
                if policy == POLICY_RETIRE then
                    if sl_pq_pop_min(pqueue) then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                else 
                    if sl_pq_leaky_pop_min(pqueue) then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                fi
            fi

/***************************************************************************/
/*         C Shavit-Lotan PQ with underlying lock-free skip-list           */
/***************************************************************************/

        xcase C_SL_PQ:
            if insert_action then
                stats.insert_attempts++;
                if 1 == c_sl_pq_add(&seed, pqueue, val) then
                    stats.insert_successes++;
                    insert_action = false;
                fi
            else // insert_action == false.
                stats.remove_attempts++;
                if policy == POLICY_LEAKY then
                    if 1 == c_sl_pq_leaky_pop_min(pqueue) then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                else
                    // policy = POLICY_RETIRE
                    if 1 == c_sl_pq_pop_min(pqueue) then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                fi
            fi

/***************************************************************************/
/*             Spray-list with underlying lock-free skip-list              */
/***************************************************************************/

        xcase SPRAY:
            if insert_action then
                stats.insert_attempts++;
                if spray_pq_add(&seed, pqueue, val) then
                    stats.insert_successes++;
                    insert_action = false;
                fi
            else // insert_action == false.
                stats.remove_attempts++;
                if policy == POLICY_LEAKY then
                    if spray_pq_leaky_pop_min(&seed, pqueue) then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                else
                    // policy = POLICY_RETIRE
                    if spray_pq_pop_min(&seed, pqueue) then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                fi
            fi

/***************************************************************************/
/*           Transactional Spray-list with underlying skip-list            */
/***************************************************************************/

        xcase SPRAY_TX:
            if insert_action then
                stats.insert_attempts++;
                if spray_tx_pq_add(&seed, pqueue, val) then
                    stats.insert_successes++;
                    insert_action = false;
                fi
            else // insert_action == false.
                stats.remove_attempts++;
                if policy == POLICY_LEAKY then
                    if spray_tx_pq_leaky_pop_min(&seed, pqueue) then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                fi
            fi

/***************************************************************************/
/*             C Spray-list with underlying lock-free skip-list             */
/***************************************************************************/

        xcase C_SPRAY:
            if insert_action then
                stats.insert_attempts++;
                if c_spray_pq_add(&seed, pqueue, val) == 1 then
                    stats.insert_successes++;
                    insert_action = false;
                fi
            else // insert_action == false.
                stats.remove_attempts++;
                if policy == POLICY_LEAKY then
                    if c_spray_pq_leaky_pop_min(&seed, pqueue) == 1 then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                else
                    // policy = POLICY_RETIRE
                    if c_spray_pq_pop_min(&seed, pqueue) == 1 then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                fi
            fi

/***************************************************************************/
/*           C Spray-list with underlying transactional skip-list          */
/***************************************************************************/

        xcase C_SPRAY_TX:
            if insert_action then
                stats.insert_attempts++;
                if 1 == c_spray_pq_tx_add(&seed, pqueue, val) then
                    stats.insert_successes++;
                    insert_action = false;
                fi
            else // insert_action == false.
                stats.remove_attempts++;
                if policy == POLICY_LEAKY then
                    if 1 == c_spray_pq_tx_pop_min_leaky(&seed, pqueue) then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                fi
            fi

/***************************************************************************/
/*         Linden Jonsson pqueue with underlying lock-free skip-list        */
/***************************************************************************/

        xcase LJ_PQ:
            if insert_action then
                stats.insert_attempts++;
                if lj_pq_add(&seed, pqueue, val) then
                    stats.insert_successes++;
                    insert_action = false;
                fi
            else // insert_action == false.
                stats.remove_attempts++;
                if policy == POLICY_RETIRE then
                    if lj_pq_pop_min(pqueue) then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                else
                    if lj_pq_leaky_pop_min(pqueue) then
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                fi
            fi

/***************************************************************************/
/*        C Linden Jonsson pqueue with underlying lock-free skip-list       */
/***************************************************************************/

        xcase C_LJ_PQ:
            if insert_action then
                stats.insert_attempts++;
                if c_lj_pq_add(&seed, pqueue, val) == 1 then
                    stats.insert_successes++;
                    insert_action = false;
                fi
            else // insert_action == false.
                stats.remove_attempts++;
                if policy == POLICY_LEAKY then
                    if c_lj_pq_leaky_pop_min(pqueue) == 1 then
                        
                        stats.remove_successes++;
                        insert_action = true;
                    fi
                fi
            fi

/***************************************************************************/
/*                    Multiqueue based on locked btrees.                   */
/***************************************************************************/

        xcase MQ_LOCKED_BTREE:
            if insert_action then
                ++stats.insert_attempts;
                mq_locked_btree_add(&seed, pqueue, val);
                ++stats.insert_successes;
                insert_action = false;
            else
                ++stats.remove_attempts;
                if mq_locked_btree_pop_min(&seed, pqueue) then
                    ++stats.remove_successes;
                    insert_action = true;
                fi
            fi

        xcase _:
            printf("error: unknown benchmark configuration.\n");
            exit(1);
        esac
    od
    printf("FINISHED\n");

    // Store this thread's statistics in the per-thread-data.
    ptd.stats = stats;
    return nil;
end

def thread_initialise(arg *void) -> *void 
begin
    var thread_data *init_thread_data_t = cast *init_thread_data_t (arg);
    var config *config_t = thread_data.config;
    var seed u64 = cast u64 (time(nil)) + thread_data.id;
    var bound = config.init_size;
    var thread_slice = bound / thread_data.total_threads;
    var extra = bound % thread_data.total_threads;
    var from = thread_slice * thread_data.id;
    var to = from + thread_slice;
    if thread_data.id == (thread_data.total_threads - 1) then to += extra; fi
    var upper_bound = config.upper_bound;
    var iterations = 0;
    while from < to do
        var val = fast_rand(&seed) % config.upper_bound;
        var res = false;
        switch config.benchmark with
        xcase FHSL_LF:
            res = fhsl_lf_add(&seed, config.pqueue, val);
        xcase FHSL_B:
            res = fhsl_b_add(&seed, config.pqueue, val);
        xcase FHSL_TX:
            res = fhsl_tx_add(&seed, config.pqueue, val);
        xcase C_FHSL_LF:
            res =  c_fhsl_lf_add(&seed, config.pqueue, val) == 1;
        xcase SL_PQ:
            res = sl_pq_add(&seed, config.pqueue, val);
        xcase C_SL_PQ:
            res = c_sl_pq_add(&seed, config.pqueue, val) == 1;
        xcase SPRAY:
            res = spray_pq_add(&seed, config.pqueue, val);
        xcase C_SPRAY:
            res = c_spray_pq_add(&seed, config.pqueue, val) == 1;
        xcase C_SPRAY_TX:
            res = c_spray_pq_tx_add(&seed, config.pqueue, val) == 1;
        xcase LJ_PQ:
            res = lj_pq_add(&seed, config.pqueue, val);
        xcase C_LJ_PQ:
            res = c_lj_pq_add(&seed, config.pqueue, val) == 1;
        xcase MQ_LOCKED_BTREE:
            mq_locked_btree_add(&seed, config.pqueue, val);
            res = true;
        xcase _:
            printf("error: unable to initialize unknown pqueue.\n");
            exit(1);
        esac
        if res then
            from++;
        fi
    od
    return nil;
end


def initialize_pqueue (config *config_t, seed *u64) -> void
begin

    switch config.benchmark with
    xcase FHSL_LF:
        config.pqueue = fhsl_lf_create();
    xcase FHSL_B:
        config.pqueue = fhsl_b_create();
    xcase FHSL_TX:
        config.pqueue = fhsl_tx_create();
    xcase C_FHSL_LF:
        config.pqueue = c_fhsl_lf_create();
    xcase SL_PQ:
        config.pqueue = sl_pq_create();
    xcase C_SL_PQ:
        config.pqueue = c_sl_pq_create();
    xcase SPRAY:
        config.pqueue = spray_pq_create(config.thread_count);
    xcase C_SPRAY:
        config.pqueue = c_spray_pq_create(config.thread_count);
    xcase C_SPRAY_TX:
        config.pqueue = c_spray_pq_tx_create(config.thread_count);
    xcase LJ_PQ:
        config.pqueue = lj_pq_create(config.thread_count);
    xcase C_LJ_PQ:
        config.pqueue = c_lj_pq_create(config.thread_count);
    xcase MQ_LOCKED_BTREE:
        config.pqueue = mq_locked_btree_create(/*FIXME*/4);
    xcase _:
        printf("error: unable to initialize unknown pqueue.\n");
        exit(1);
    esac

    var max_threads = get_num_cores();
    if max_threads > 16 then
        max_threads = 16;
    fi
    var thread_data *init_thread_data_t = new [max_threads]init_thread_data_t;
    var tids *pthread_t = new [max_threads]pthread_t;
    for var i = 0; i < max_threads; ++i do
        thread_data[i] = {config, max_threads, i};
        var ret = pthread_create(&tids[i], nil, thread_initialise, &thread_data[i]);
        if ret != 0 then
            printf("error: failed to create thread id: %d\n", i);
            exit(1);
        fi
    od
    printf("joining initialisation threads...\n");
    for var i = 0; i < max_threads; ++i do
        var ret = pthread_join(tids[i], nil);
        if ret != 0 then
            printf("error: failed to join thread id: %d\n", i);
            exit(1);
        fi
    od
    printf("initialisation threads joined\n");
    delete thread_data;
    delete tids;
end


export
def main (argc i32, argv **char) -> i32
begin
    
    var config = read_args(argc, argv);
    var seed = cast u64 (time(nil));
    var state = STATE_WAIT;

    forkscan_set_allocator(malloc, free, malloc_usable_size);

    verify_config(&config);
    print_config(&config);

    printf("Initializing set.\n");
    initialize_pqueue(&config, &seed);

    printf("Starting threads.\n");
    var tids *pthread_t = new [config.thread_count]pthread_t;
    var ptds *per_thread_data_t = new [config.thread_count]per_thread_data_t;
    for var i = 0; i < config.thread_count; ++i do
        ptds[i] =
            { &config,
              i,
              &state,
              { 0, 0, 0, 0 }
            };
        var ret = pthread_create(&tids[i], nil, thread, &ptds[i]);
        if ret != 0 then
            printf("error: failed to create thread id: %d\n", i);
            exit(1);
        fi
    od

    puts("beginning");

    var start_time = hires_timer();
    state = STATE_RUN;
    // Robust sleep against Forkscan signals.
    forkscan_sleep(config.duration_s);
    state = STATE_END;

    puts("ending");
    printf("Joining threads.\n");
    for var i = 0; i < config.thread_count; ++i do
        var ret = pthread_join(tids[i], nil);
        if ret != 0 then
            printf("error: failed to join thread id: %d\n", i);
            exit(1);
        fi
        printf("[joined thread %d]\n", i);
    od
    var runtime = hires_timer() - start_time;

    // Print out the statistics.
    puts("Summary:");
    printf("  runtime (s) : %.9f\n", runtime);

    var totals stats_t = { 0, 0, 0, 0 };
    for var i = 0; i < config.thread_count; ++i do
        printf("statistics for thread %d\n", i);
        print_stats(&ptds[i].stats, runtime);
        totals.insert_attempts += ptds[i].stats.insert_attempts;
        totals.insert_successes += ptds[i].stats.insert_successes;
        totals.remove_attempts += ptds[i].stats.remove_attempts;
        totals.remove_successes += ptds[i].stats.remove_successes;
    od

    printf("total statistics:\n");
    print_stats(&totals, runtime);
    if config.csv then print_csv(&config, &totals, runtime); fi

    delete tids;
    delete ptds;
    return 0;
end

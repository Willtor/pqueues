/* Fixed height blocking concurrent skiplist.
 * From paper "A Provably Correct Scalable Concurrent Skip List"
 * Blocking updates (add/remove) and wait-free reads (contains).
*/

import "pthread.h";

typedef node =
  { val      i64,            // Value.
    topLevel i32,
    next     [20]*node,       // Follow-list of nodes.
    marked bool,
    fullylinked bool,
    lock pthread_spinlock_t
  };

export opaque
typedef fhsl_b =
    { head  node,
      tail  node
    };

/** Return a new fixed-height skip list.
 */
export
def fhsl_b_create () -> *fhsl_b
begin
    var fhsl_b = new fhsl_b;
    fhsl_b.head.val = 0x8000000000000000I64;
    fhsl_b.tail.val = 0x7FFFFFFFFFFFFFFFI64;
    for var i = 0; i < 20; ++i do
        fhsl_b.head.next[i] = &fhsl_b.tail;
        fhsl_b.tail.next[i] = nil;
        pthread_spin_init(&fhsl_b.head.lock, 0);
        pthread_spin_init(&fhsl_b.tail.lock, 0);
    od
    return fhsl_b;
end

/** Checks whether a node, wait-free, is present in the skiplist.
 */
export
def fhsl_b_contains(set *fhsl_b, x i64) -> bool
begin
  var preds [20]*node;
  var succs [20]*node;
  var lFound = find(set, x, preds, succs);
  if lFound == -1I64 then
    return false;
  fi
  return (succs[lFound].fullylinked == true && succs[lFound].marked == false);
end

/** Add a node, blocking, to the skiplist.
 */
export
def fhsl_b_add (seed *u64, set *fhsl_b, x i64) -> bool
begin
    var preds [20]*node;
    var succs [20]*node;
    var topLevel = random_level(seed, 20);
    while true do
      var lFound = find(set, x, preds, succs);
      if lFound != -1 then
        var nodefound volatile *node = succs[lFound];
        if !nodefound.marked then
          while !nodefound.fullylinked do
            // Busy wait...
          od
          return false;
        fi
        continue;
      fi
      var pred, succ, prevPred * node = nil, nil, nil;
      var highestlocked i64 = -1;
      var valid = true;
      for var level = 0; valid && level <= topLevel; ++level do
        pred = preds[level];
        succ = succs[level];
        if pred != prevPred then
          pthread_spin_lock(&pred.lock);
          highestlocked = level;
          prevPred = pred;
        fi
        valid = (!pred.marked && !succ.marked && pred.next[level] == succ);  
      od
      if !valid then
        unlock_nodes(preds, highestlocked);
        continue;
      fi
      var newnode = new node;
      newnode.val = x;
      newnode.topLevel = topLevel;
      newnode.marked = false;
      newnode.fullylinked = false;
      pthread_spin_init(&newnode.lock, 0);
      for var level = 0; level <= topLevel; ++level do
        newnode.next[level] = succs[level];
        preds[level].next[level] = newnode;
      od
      newnode.fullylinked = true;
      unlock_nodes(preds, highestlocked);
      return true;
    od
end

/** Remove a node, blocking, from the skiplist.
 */
export
def fhsl_b_remove(set * fhsl_b, key i64) -> bool
begin
  var nodeToDelete volatile *node = nil;
  var isMarked = false;
  var topLevel i64 = -1;
  var preds [20]*node;
  var succs [20]*node;
  while true do
    var lFound = find(set, key, preds, succs);
    if isMarked || (lFound != -1 && ok_to_delete(succs[lFound], lFound)) then
      if !isMarked then
        nodeToDelete = succs[lFound];
        topLevel = nodeToDelete.topLevel;
        pthread_spin_lock(&nodeToDelete.lock);
        if nodeToDelete.marked then
          pthread_spin_unlock(&nodeToDelete.lock);
          return false;
        fi
        nodeToDelete.marked = true;
        isMarked = true;
      fi
      var highestlocked = -1;
      var pred, succ, prevPred * node = nil, nil, nil;
      var valid bool = true;
      for var level = 0; valid && level <= topLevel; ++level do
        pred = preds[level];
        succ = succs[level];
        if pred != prevPred then
          pthread_spin_lock(&pred.lock);
          highestlocked = level;
          prevPred = pred;
        fi
        valid = (!pred.marked && pred.next[level] == succ);  
      od
      if !valid then
        unlock_nodes(preds, highestlocked);
        continue;
      fi
      for var level = 0; level <= topLevel; ++level do
        preds[level].next[level] = nodeToDelete.next[level];
      od
      pthread_spin_unlock(&nodeToDelete.lock);
      unlock_nodes(preds, highestlocked);
      return true;
    else return false; fi
  od
end

def find (set *fhsl_b,
          key i64,
          preds [20]*node,
          succs [20]*node) -> i64
begin
    var lFound i64 = -1;
    var pred = &set.head;
    for var level = 19; level >= 0; --level do
        var curr volatile *node = pred.next[level];
        while key > curr.val do
            pred = curr;
            curr = pred.next[level];
        od
        if lFound == -1 && key == curr.val then
            lFound = level;
        fi
        preds[level] = pred;
        succs[level] = curr;
    od
    return lFound;
end

def unlock_nodes(nodes [20]*node, highest i64) -> void
begin
  for var level = 0; level <= highest; ++level do
    pthread_spin_unlock(&nodes[level].lock);
  od
end

def ok_to_delete(candidate *node, lFound i64) -> bool
begin
  return (candidate.fullylinked && candidate.topLevel == lFound && !candidate.marked);
end

def fast_rand (seed *u64) -> u64
begin
    var val = seed[0];
    if val == 0 then val = 1; fi

    val ^= val << 6;
    val ^= val >> 21;
    val ^= val << 7;

    seed[0] = val;
    return val;
end

def random_level (seed *u64, max u32) -> u32
begin
    var level = 1;
    while fast_rand(seed) %2 == 0 && level < max do
        ++level;
    od
    return level - 1;
end



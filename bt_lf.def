/*
 * _Fast_ Concurrent Lock-Free Binary Search Trees 
*/

import "stddef.h";
import "stdio.h";
import "utils.h";

typedef node_t = {
    key i64,
    // Marked pointers
    left volatile * volatile node_t,
    right volatile * volatile node_t
};

typedef node_ptr =  volatile * volatile node_t;

export opaque
typedef bt_lf_t = {
    leaky bool,
    R node_ptr,
    S node_ptr
};

typedef remove_state_t = enum
    | INJECTION
    | CLEANUP
    ;

typedef node_unpacked_t = {
    flagged bool, 
    tagged bool,
    address node_ptr
};

typedef seek_record_t = {
    ancestor node_ptr,
    successor node_ptr,
    parent node_ptr,
    leaf node_ptr
};

def node_create(key i64) -> *node_t
begin
    var node *node_t = new node_t;
    node.key = key;
    node.left = nil;
    node.right = nil;
    return node;
end

def node_address(node node_ptr) -> node_ptr
begin
    return cast node_ptr ((cast size_t (node) >> 2) << 2);
end

def node_flag(node node_ptr, flag bool) -> node_ptr
begin
    if flag then
        return cast node_ptr (cast size_t (node) | 0x1);
    else
        return cast node_ptr ((cast size_t (node) >> 1) << 1);
    fi
end

def node_is_flagged(node node_ptr) -> bool
begin
    return (cast size_t (node) & 0x1) == 1;
end

def node_tag(node node_ptr, tag bool) -> node_ptr
begin
    if tag then
        return cast node_ptr (cast size_t (node) | 0x2);
    else
        var is_flagged = node_is_flagged(node);
        var new_node = cast node_ptr (
            (cast size_t (node) >> 2) << 2);
        return node_flag(new_node, is_flagged);
    fi
end 

def node_is_tagged(node node_ptr) -> bool
begin
    return (cast size_t (node) & 0x2) == 2;
end

def node_pack(node node_ptr, flag bool, tag bool) -> node_ptr
begin
    return node_tag(node_flag(node_address(node), flag), tag);
end

def node_unpack(node node_ptr) -> node_unpacked_t
begin
    var unpacked_node node_unpacked_t;
    unpacked_node.flagged = node_is_flagged(node);
    unpacked_node.tagged = node_is_tagged(node);
    unpacked_node.address = node_address(node);
    return unpacked_node;
end

export
def bt_lf_create(leaky bool) -> *bt_lf_t
begin
    var bt_lf = new bt_lf_t;
    bt_lf.leaky = leaky;
    bt_lf.R = node_create(0x7FFFFFFFFFFFFFFFI64);
    bt_lf.S = node_create(0x7FFFFFFFFFFFFFFEI64);
    bt_lf.R.left = bt_lf.S;
    bt_lf.S.left = node_create(0x7FFFFFFFFFFFFFFDI64);
    bt_lf.S.right = node_create(0x7FFFFFFFFFFFFFFEI64);
    return bt_lf;
end

def init_seek_record(bt_lf *bt_lf_t, sr *seek_record_t) -> void
begin
    sr.ancestor = bt_lf.R;
    sr.successor = bt_lf.S;
    sr.parent = bt_lf.S;
    sr.leaf = node_address(bt_lf.S.left);
end

def bt_lf_node_setup(key i64, sibling_key i64, sibling_node node_ptr) -> node_ptr
begin
    var node = node_create(key);
    var internal_node = node_create(key);
    if key < sibling_key then
        internal_node.left = node;
        internal_node.right = sibling_node;
        internal_node.key = sibling_key;
    else
        internal_node.left = sibling_node;
        internal_node.right = node;
    fi
    return internal_node;
end

def bt_lf_seek(set *bt_lf_t, sr *seek_record_t, key i64) -> void
begin
    init_seek_record(set, sr);
    var parent_field node_ptr = sr.parent.left;
    var current_field node_ptr = sr.leaf.left;
    var current node_ptr = node_address(current_field);

    while(current != nil) do
        if !node_is_tagged(parent_field) then
            sr.ancestor = sr.parent;
            sr.successor = sr.leaf;
        fi
        sr.parent = sr.leaf;
        sr.leaf = current;
        parent_field = current_field;
        if key < current.key then
            current_field = current.left;
        else
            current_field = current.right;
        fi
        current = node_address(current_field);
    od
end

def bt_lf_cleanup(set *bt_lf_t, sr *seek_record_t, key i64) -> bool
begin
    var ancestor, successor, parent, leaf = sr.ancestor, 
        sr.successor, sr.parent, sr.leaf;
    
    var successor_address volatile * node_ptr = nil;
    if key < ancestor.key then
        successor_address = &ancestor.left;
    else 
        successor_address = &ancestor.right;
    fi
    var child_val node_ptr = nil;
    var child_address volatile * node_ptr = nil;
    var sibling_val node_ptr = nil;
    var sibling_address volatile * node_ptr  = nil;

    if key < parent.key then
        child_val = parent.left;
        child_address = &parent.left;
        sibling_val = parent.right;
        sibling_address = &parent.right;
    else
        child_val = parent.right;
        child_address = &parent.right;
        sibling_val = parent.left;
        sibling_address = &parent.left;
    fi
    var unpacked_child node_unpacked_t = node_unpack(child_address[0]);
    if !unpacked_child.flagged then
        sibling_val = child_val;
        sibling_address = child_address;
    fi    

    fetch_and_or(cast *u64 (sibling_address), 2);
    var unpacked_sibbling node_unpacked_t = 
        node_unpack(sibling_address[0]);
    var res = __builtin_cas(successor_address, node_address(successor),
        node_flag(unpacked_sibbling.address, unpacked_sibbling.flagged));
    if !set.leaky && res then
        retire successor;
    fi
    return res;
end

export
def bt_lf_contains(set *bt_lf_t, key i64) -> bool
begin
    var sr seek_record_t;
    bt_lf_seek(set, &sr, key);
    return sr.leaf.key == key;
end

export
def bt_lf_add(set *bt_lf_t, key i64) -> bool
begin
    while true do
        var sr seek_record_t;
        bt_lf_seek(set, &sr, key);
        var leaf_key = sr.leaf.key;
        if leaf_key != key then
            var parent, leaf = sr.parent, sr.leaf;
            var child_address volatile *node_ptr = nil;
            var parent_key = parent.key;
            if key < parent_key then
                child_address = &parent.left;
            else
                child_address = &parent.right;
            fi
            var internal_node = bt_lf_node_setup(key, leaf_key, leaf);
            var result = __builtin_cas(child_address, node_address(leaf),
                internal_node);
            if result then
                return true;
            else
                if key < leaf_key then
                    delete internal_node.left;
                else
                    delete internal_node.right;
                fi
                delete internal_node;
                var unpacked_node node_unpacked_t = node_unpack(child_address[0]);
                if unpacked_node.address == leaf && 
                    (unpacked_node.flagged || unpacked_node.tagged) then
                    var done = bt_lf_cleanup(set, &sr, key);
                fi
            fi
        else
            return false;
        fi
    od
end

export
def bt_lf_remove(set *bt_lf_t, key i64) -> bool
begin
    var mode = INJECTION;
    var leaf node_ptr = nil;
    while true do
        var sr seek_record_t;
        bt_lf_seek(set, &sr, key);
        var parent = sr.parent;
        var child_address volatile * node_ptr = nil;
        if key < parent.key then
            child_address = &parent.left;
        else
            child_address = &parent.right;
        fi
        if mode == INJECTION then
            leaf = sr.leaf;
            if leaf.key != key then
                return false;
            fi
            var result = __builtin_cas(child_address,
                node_address(leaf), node_flag(leaf, true));
            if result then
                mode = CLEANUP;
                var done = bt_lf_cleanup(set, &sr, key);
                if done then
                    if !set.leaky then
                        retire(leaf);
                    fi
                    return true;
                fi
            else
                var unpacked_node node_unpacked_t = node_unpack(child_address[0]);
                if unpacked_node.address == leaf &&
                    (unpacked_node.flagged || unpacked_node.tagged) then
                    var done = bt_lf_cleanup(set, &sr, key);
                fi
            fi
        else
            if sr.leaf != leaf then
                if !set.leaky then
                    retire(leaf);
                fi
                return true;
            else
                var done = bt_lf_cleanup(set, &sr, key);
                if done then
                    if !set.leaky then
                        retire(leaf);
                    fi
                    return true;
                fi
            fi
        fi
    od
end

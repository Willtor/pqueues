import "stdio.h";

@[define
   [make-btree keytype suffix]
   [let [[leaf [string-append "leaf" suffix]]
         [node [string-append "node" suffix]]
         [serial_btree [string-append "serial_btree" suffix]]
         [make_leaf [string-append "make_leaf" suffix]]
         [make_node [string-append "make_node" suffix]]
         [serial_btree_print [string-append "serial_btree_print" suffix]]
         [node_print [string-append "node_print" suffix]]

         [serial_btree_create [string-append "serial_btree_create" suffix]]
         [destroy_node [string-append "destroy_node" suffix]]
         [serial_btree_destroy [string-append "serial_btree_destroy" suffix]]
         [search_node [string-append "search_node" suffix]]
         [serial_btree_contains [string-append "serial_btree_contains" suffix]]
         [serial_btree_insert [string-append "serial_btree_insert" suffix]]
         [split_child [string-append "split_child" suffix]]
         [insert_nonfull [string-append "insert_nonfull" suffix]]
         [serial_btree_remove [string-append "serial_btree_remove" suffix]]
         [remove_key [string-append "remove_key" suffix]]
         [merge_siblings [string-append "merge_siblings" suffix]]
         [index_of [string-append "index_of" suffix]]
         [serial_btree_peek_min [string-append "serial_btree_peek_min" suffix]]
         [serial_btree_is_empty [string-append "serial_btree_is_empty" suffix]]
         [peek_min [string-append "peek_min" suffix]]
        ]
     [parse-stmts

// Leaf for t = 2.
typedef @[emit-ident leaf] =
    { n         i32,
      is_leaf   bool,
      keys      [3]@[emit-ident keytype]
    };

// Internal node for t = 2.
typedef @[emit-ident node] =
    { n         i32,
      is_leaf   bool,
      keys      [3]@[emit-ident keytype],
      children  [4]*@[emit-ident node]
    };

/** btree object.
 */
export opaque
typedef @[emit-ident serial_btree] =
    { root *@[emit-ident node] };

def @[emit-ident make_leaf] () -> *@[emit-ident leaf]
begin
    var leaf = new @[emit-ident leaf] { n       : 0,
                                        is_leaf : true
                                       };
    return leaf;
end

def @[emit-ident make_node] () -> *@[emit-ident node]
begin
    var node = new @[emit-ident node] { n       : 0,
                                        is_leaf : false
                                      };
    return node;
end

export
def @[emit-ident serial_btree_print] (btree *@[emit-ident serial_btree]) -> void
begin
    printf("btree at %p:\n", btree);
    @[emit-ident node_print](btree.root, 1);
end

def @[emit-ident node_print] (node *@[emit-ident node], depth i32) -> void
begin
    for var i = 0; i < depth; ++i do
        printf("  ");
    od
    if node.is_leaf then
        printf("leaf [n = %d]:", node.n);
    else
        printf("node [n = %d]:", node.n);
    fi

    for var i = 0; i < node.n; ++i do
        printf(" %lld", node.keys[i]);
    od
    printf("\n");

    if !node.is_leaf then
        for var i = 0; i <= node.n; ++i do
            @[emit-ident node_print](node.children[i], depth + 1);
        od
    fi
end

/** Create an empty btree.
 */
export
def @[emit-ident serial_btree_create] () -> *@[emit-ident serial_btree]
begin
    var root = cast *@[emit-ident node] (@[emit-ident make_leaf]());
    var btree = new @[emit-ident serial_btree] { root : root };
    return btree;
end

def @[emit-ident destroy_node] (node *@[emit-ident node]) -> void
begin
    if !node.is_leaf then
        for var i = 0; i <= node.n; ++i do
            @[emit-ident destroy_node](node.children[i]);
        od
    fi
    delete node;
end

/** Destroy a btree.
 */
export
def @[emit-ident serial_btree_destroy] (btree *@[emit-ident serial_btree]) -> void
begin
    @[emit-ident destroy_node](btree.root);
    delete btree;
end

def @[emit-ident search_node] (node *@[emit-ident node],
                               key @[emit-ident keytype]) -> bool
begin
    var i i32;
    for i = 0; i < node.n  && key > node.keys[i]; ++i do
    od
    if i < node.n && key == node.keys[i] then
        return true;
    elif node.is_leaf then
        return false;
    fi
    return @[emit-ident search_node](node.children[i], key);
end

/** Search a btree for a given key.
 */
export
def @[emit-ident serial_btree_contains] (btree *@[emit-ident serial_btree],
                                         key @[emit-ident keytype]) -> bool
begin
    return @[emit-ident search_node](btree.root, key);
end

/** Insert a new value into the btree.
 */
export
def @[emit-ident serial_btree_insert] (btree *@[emit-ident serial_btree],
                                       key @[emit-ident keytype]) -> void
begin
    var root = btree.root;
    if root.n == /*2t-1=*/3 then
        var s = @[emit-ident make_node]();
        btree.root = s;
        s.children[0] = root;
        @[emit-ident split_child](s, 0);
        @[emit-ident insert_nonfull](s, key);
    else
        @[emit-ident insert_nonfull](root, key);
    fi
end

def @[emit-ident split_child] (x *@[emit-ident node], i i32) -> void
begin
    var z = @[emit-ident make_node]();
    var y = x.children[i];
    z.is_leaf = y.is_leaf;
    z.n = /*t-1=*/1;
    for var j = 0; j < /*t-1=*/1; ++j do
        z.keys[j] = y.keys[j + /*t=*/2];
    od
    y.n = /*t-1=*/1;
    if !y.is_leaf then
        for var j = 0; j < /*t=*/2; ++j do
            z.children[j] = y.children[j + /*t=*/2];
        od
    fi
    for var j = x.n; j > i; --j do
        x.children[j + 1] = x.children[j];
    od
    x.children[i + 1] = z;
    for var j = x.n - 1; j >= i; --j do
        x.keys[j + 1] = x.keys[j];
    od
    x.keys[i] = y.keys[/*t-1*/1];
    ++x.n;
end

def @[emit-ident insert_nonfull] (node *@[emit-ident node],
                                  key @[emit-ident keytype]) -> void
begin
    var i = node.n - 1;
    if node.is_leaf then
        while i >= 0 && key < node.keys[i] do
            node.keys[i + 1] = node.keys[i];
            --i;
        od
        node.keys[i + 1] = key;
        ++node.n;
    else
        while i >= 0 && key < node.keys[i] do
            --i;
        od
        ++i;
        if node.children[i].n == /*2t-1*/3 then
            @[emit-ident split_child](node, i);
            if key > node.keys[i] then
                ++i;
            fi
        fi
        @[emit-ident insert_nonfull](node.children[i], key);
    fi
end

/** Remove the specified key from the set.  Return true iff the key was
 *  present to be removed.
 */
export
def @[emit-ident serial_btree_remove] (btree *@[emit-ident serial_btree],
                                       key @[emit-ident keytype]) -> bool
begin
    if btree.root.n < 1 then
        return false;
    fi
    var removed = @[emit-ident remove_key](btree.root, key);
    if btree.root.n < 1 && !btree.root.is_leaf then
        // It's possible the root becomes empty of keys, but still has a
        // populated child.  This can't happen in deep nodes; the root is
        // a special case.  CLRS [p499].
        var trash = btree.root;
        btree.root = trash.children[0];
        delete trash;
    fi
    return removed;
end

def @[emit-ident remove_key] (node *@[emit-ident node],
                              key @[emit-ident keytype]) -> bool
begin
    var i = @[emit-ident index_of](node, key);

    // CLRS [p500]: Case 1.
    if node.is_leaf then
        if i < node.n && node.keys[i] == key then
            ++i;
            while i < node.n do
                node.keys[i - 1] = node.keys[i];
                ++i;
            od
            --node.n;
            return true;
        fi
        return false;
    fi

    // CLRS [p500]: Case 2.
    if i < node.n && node.keys[i] == key then

        // CLRS [p501]: Case 2a.
        var y = node.children[i];
        if y.n >= /*t=*/2 then
            var k_prime = y.keys[y.n - 1];
            @[emit-ident remove_key](y, k_prime);
            node.keys[i] = k_prime;
            // node.n didn't change.
            return true;
        fi

        // CLRS [p501]: Case 2b.
        var z = node.children[i + 1];
        if z.n >= /*t=*/2 then
            var k_prime = z.keys[0];
            @[emit-ident remove_key](z, k_prime);
            node.keys[i] = k_prime;
            // node.n didn't change.
            return true;
        fi

        // CLFS [p501]: Case 2c.
        @[emit-ident merge_siblings](node, i);
        return @[emit-ident remove_key](y, key); // true, but tail-recursive.
    fi

    // CLRS [p501]: Case 3.
    var child = node.children[i];
    if child.n < /*t=*/2 then

        // CLRS [p502]: Case 3a.
        if i > 0 && node.children[i - 1].n >= /*t=*/2 then // Rotate right.
            var victim = node.children[i - 1];
            if child.is_leaf then
                for var j = child.n; j > 0; --j do
                    child.keys[j] = child.keys[j - 1];
                od
            else
                for var j = child.n; j > 0; --j do
                    child.keys[j] = child.keys[j - 1];
                    child.children[j + 1] = child.children[j];
                od
                child.children[1] = child.children[0];
                child.children[0] = victim.children[victim.n];
            fi
            child.keys[0] = node.keys[i - 1];
            ++child.n;
            node.keys[i - 1] = victim.keys[victim.n - 1];
            --victim.n;
        elif i < node.n
             && node.children[i + 1].n >= /*t=*/2 then // Rotate left.
            var victim = node.children[i + 1];
            child.keys[child.n] = node.keys[i];
            if !child.is_leaf then
                child.children[child.n + 1] = victim.children[0];
            fi
            ++child.n;
            node.keys[i] = victim.keys[0];
            if victim.is_leaf then
                for var j = 0; j < victim.n - 1; ++j do
                    victim.keys[j] = victim.keys[j + 1];
                od
            else
                for var j = 0; j < victim.n - 1; ++j do
                    victim.keys[j] = victim.keys[j + 1];
                    victim.children[j] = victim.children[j + 1];
                od
                victim.children[victim.n - 1] = victim.children[victim.n];
            fi
            --victim.n;

        // CLRS [p502]: Case 3b.
        else // Merge siblings.  Prefer left.
            if i > 0 then
                @[emit-ident merge_siblings](node, i - 1);
            else
                @[emit-ident merge_siblings](node, i);
            fi
        fi

    fi
    i = @[emit-ident index_of](node, key); // Find i, again.
    return @[emit-ident remove_key](node.children[i], key);
end

def @[emit-ident merge_siblings] (node *@[emit-ident node], i i32) -> void
begin
    var y = node.children[i];
    var z = node.children[i + 1];

    y.keys[/*t-1=*/1] = node.keys[i];
    if y.is_leaf then
        for var j = 0; j < z.n; ++j do
            y.keys[j + /*t=*/2] = z.keys[j];
        od
    else
        for var j = 0; j < z.n; ++j do
            y.keys[j + /*t=*/2] = z.keys[j];
            y.children[j + /*t=*/2] = z.children[j];
        od
        y.children[/*2t-1=*/3] = z.children[/*t-1*/1];
    fi
    y.n = /*2t-1=*/3;
    ++i;
    while i < node.n do
        node.keys[i - 1] = node.keys[i];
        node.children[i] = node.children[i + 1];
        ++i;
    od
    --node.n;

    delete z;
end

def @[emit-ident index_of] (node *@[emit-ident node],
                            key @[emit-ident keytype]) -> i32
begin
    var i = 0;
    while i < node.n && node.keys[i] < key do
        ++i;
    od
    return i;
end

/** Peek at the min value in the btree.  The return value is undefined if
 *  the btree is empty.
 */
export
def @[emit-ident serial_btree_peek_min] (btree *@[emit-ident serial_btree])
                                        -> @[emit-ident keytype]
begin
    return @[emit-ident peek_min](btree.root);
end

export
def @[emit-ident serial_btree_is_empty] (btree *@[emit-ident serial_btree])
                                        -> bool
begin
    return btree.root.n == 0;
end

def @[emit-ident peek_min] (node *@[emit-ident node]) -> @[emit-ident keytype]
begin
    if node.is_leaf then
        return node.keys[0];
    fi
    return @[emit-ident peek_min](node.children[0]);
end

    ]
  ]
]

@[make-btree "i64" ""]

@[make-btree "f64" "_f64"]

import "forkscan.defi";
import "pthread.h";
import "stdio.h";
import "time.h";
import "stdlib.h";

// Set data structures:
import "fhsl_lf.defi";
import "fhsl_b.defi";

typedef benchmark_t = enum
    | FHSL_LF
    | FHSL_B
    ;

typedef state_t = enum
    | STATE_WAIT
    | STATE_RUN
    | STATE_END
    ;

typedef config_t =
    {
        benchmark      benchmark_t,
        duration_s     i32,
        thread_count   i32,
        init_size      i64,
        upper_bound    i64,
        update_rate    i32,
        set            *void
    };

typedef stats_t =
    {
        read_attempts     i64,
        read_successes    i64,
        insert_attempts   i64,
        insert_successes  i64,
        remove_attempts   i64,
        remove_successes  i64
    };

typedef per_thread_data_t =
    {
        config         *config_t,
        id             i32,
        state          volatile *state_t,
        stats          stats_t
    };

def fast_rand (seed *u64) -> u64
begin
    var val = seed[0];
    if val == 0 then val = 1; fi

    val ^= val << 6;
    val ^= val >> 21;
    val ^= val << 7;

    seed[0] = val;
    return val;
end

def string_of_benchmark (b benchmark_t) -> *char
begin
    switch b with
    xcase FHSL_LF: return "fhsl_lf";
    xcase FHSL_B: return "fhsl_b";
    xcase _: return "unknown benchmark";
    esac
    return "FIXME: need reachability detection after a switch.";
end

def help (bench *char) -> void
begin
    printf("Usage: %s [OPTIONS]\n", bench);
    printf("  -h, --help: This help message.\n");
    printf("  -t <n>: Set the number of threads. (default = 1)\n");
    printf("  -d <n>: Benchmark duration in seconds. (default = 1)\n");
    printf("  -b <benchmark>: Set the benchmark. (default = fhsl_lf)\n");
    printf("     * fhsl_lf: Fixed-height skip list; lock-free.\n");
    printf("     * fhsl_b: Fixed-height skip list; blocking.\n");
    printf("  -i <n>: Initial set size. (default = 256)\n");
    printf("  -r <n>: Range upper bound [0-n). (default = 512)\n");
    printf("  -u <n>: Percent of ops that are updates. (default = 10)\n");
    exit(127);
end

/** Parse an i32 from txt in the range [low, high].  The err text is the
 *  command line option and is used in case of failure.
 */
def read_i32 (low i32, high i32, txt *char, err *char) -> i32
begin
    var n = atoi(txt);
    if n < low || n > high then
        fprintf(stderr, "error: %s requires an argument between %d and %d\n",
                err, low, high);
        exit(1);
    fi
    return n;
end

/** Parse an i64 from txt in the range [low, high].  The err text is the
 *  command line option and is used in case of failure.
 */
def read_i64 (low i64, high i64, txt *char, err *char) -> i64
begin
    var n = atoll(txt);
    if n < low || n > high then
        fprintf(stderr, "error: %s requires an argument between %lld and %lld\n",
                err, low, high);
        exit(1);
    fi
    return n;
end

def read_args (argc i32, argv **char) -> config_t
begin
    var config config_t =
        { FHSL_LF, 1, 1, 256, 512, 10, nil };

    for var i = 1; i < argc; ++i do
        switch argv[i] with
        xcase "-h":
        ocase "--help":
            help(argv[0]); // no return.
        xcase "-t":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -t requires an argument.\n");
                exit(1);
            fi
            config.thread_count = read_i32(1, 128, argv[i], "-t");
        xcase "-d":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -d requires an argument.\n");
                exit(1);
            fi
            config.duration_s = read_i32(1, 999, argv[i], "-d");
        xcase "-b":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -b requires an argument.\n");
                exit(1);
            fi
            switch argv[i] with
            xcase "fhsl_lf": config.benchmark = FHSL_LF;
            xcase "fhsl_b": config.benchmark = FHSL_B;
            xcase _:
                printf("unknown benchmark: %s\n", argv[i]);
                exit(1);
            esac
        xcase "-i":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -i requires an argument.\n");
                exit(1);
            fi
            config.init_size =
                read_i64(1, 0x7FFFFFFFFFFFFFFFI64, argv[i], "-i");
        xcase "-r":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -r requires an argument.\n");
                exit(1);
            fi
            config.upper_bound =
                read_i64(1, 0x7FFFFFFFFFFFFFFFI64, argv[i], "-r");
        xcase "-u":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -u requires an argument.\n");
                exit(1);
            fi
            config.update_rate = read_i32(0, 100, argv[i], "-u");
        xcase _:
            printf("unknown option: %s\n", argv[i]);
            exit(1);
        esac
    od

    return config;
end

def print_config (config *config_t) -> void
begin
    printf("Benchmark configuration\n");
    printf("--------- -------------\n");
    printf("  benchmark    : %s\n", string_of_benchmark(config.benchmark));
    printf("  duration (s) : %d\n", config.duration_s);
    printf("  thread count : %d\n", config.thread_count);
    printf("  initial size : %lld\n", config.init_size);
    printf("  range        : [0-%lld)\n", config.upper_bound);
    printf("  updates      : %d%%\n", config.update_rate);

    puts(""); // blank line.
end

def success_rate (attempts i64, successes i64) -> f64
begin
    if attempts == 0 then return 0.0F64; fi
    return cast(type f64, successes) * 100.0F64 / cast(type f64, attempts);
end

def print_stats (stats *stats_t) -> void
begin
    var total_ops i64 = 0;
    printf("  read-attempts    : %lld\n", stats.read_attempts);
    printf("  read-successes   : %lld (%.1f%%)\n", stats.read_successes,
           success_rate(stats.read_attempts, stats.read_successes));
    printf("  insert-attempts  : %lld\n", stats.insert_attempts);
    printf("  insert-successes : %lld (%.1f%%)\n", stats.insert_successes,
           success_rate(stats.insert_attempts, stats.insert_successes));
    printf("  remove-attempts  : %lld\n", stats.remove_attempts);
    printf("  remove-successes : %lld (%.1f%%)\n", stats.remove_successes,
           success_rate(stats.remove_attempts, stats.remove_successes));

    total_ops = stats.read_successes
        + stats.insert_successes
        + stats.remove_successes;

    printf("  total-operations : %lld\n", total_ops);
end

def thread (arg *void) -> *void
begin
    var seed = cast(type u64, time(nil));
    var ptd = cast(type volatile *per_thread_data_t, arg);
    var stats stats_t = { 0, 0, 0, 0, 0, 0 };
    var config *config_t = ptd.config;
    var bench = config.benchmark;

    printf("[started thread %d]\n", ptd.id);
    while ptd.state[0] == STATE_WAIT do
        // busy-wait.
    od
    var read_action = 100 - config.update_rate;
    var add_action = read_action + (config.update_rate / 2);
    while ptd.state[0] == STATE_RUN do
        var action = fast_rand(&seed) % 100;
        var val = cast(type i64, fast_rand(&seed) % config.upper_bound);
        switch bench with
        xcase FHSL_LF:
            if action < read_action then
                stats.read_attempts++;
                if fhsl_lf_contains(config.set, val) then
                    stats.read_successes++;
                fi
            elif action < add_action then
                stats.insert_attempts++;
                if fhsl_lf_add(&seed, config.set, val) then
                    stats.insert_successes++;
                fi
            else
                stats.remove_attempts++;
                if fhsl_lf_remove(config.set, val) then
                    stats.remove_successes++;
                fi
            fi
        xcase FHSL_B:
            if action < read_action then
                stats.read_attempts++;
                if fhsl_b_contains(config.set, val) then
                    stats.read_successes++;
                fi
            elif action < add_action then
                stats.insert_attempts++;
                if fhsl_b_add(&seed, config.set, val) then
                    stats.insert_successes++;
                fi
            else
                stats.remove_attempts++;
                if fhsl_b_remove(config.set, val) then
                    stats.remove_successes++;
                fi
            fi
        xcase _:
            printf("error: unknown benchmark configuration.\n");
            exit(1);
        esac
    od

    // Store this thread's statistics in the per-thread-data.
    ptd.stats = stats;
    return nil;
end

def initialize_set (config *config_t, seed *u64) -> void
begin
    switch config.benchmark with
    xcase FHSL_LF:
        var set = fhsl_lf_create();
        for var i = 0; i < config.init_size; ++i do
            var val = cast(type i64, fast_rand(seed) % config.upper_bound);
            if false == fhsl_lf_add(seed, set, val) then
                --i;
            fi
        od
        config.set = set;
    xcase FHSL_B:
        // Change var indentier to "set" to find a bug.
        var my_set *fhsl_b = fhsl_b_create();
        for var i = 0; i < config.init_size; ++i do
            var val = cast(type i64, fast_rand(seed)  % config.upper_bound);
            if false == fhsl_b_add(seed, my_set, val) then
                --i;
            fi
        od
        config.set = cast(type *void, my_set);
    xcase _:
        printf("error: unable to initialize unknown set.\n");
        exit(1);
    esac
end

export
def main (argc i32, argv **char) -> i32
begin
    var config = read_args(argc, argv);
    var seed = cast(type u64, time(nil));
    var state = STATE_WAIT;
    print_config(&config);

    printf("Initializing set.\n");
    initialize_set(&config, &seed);

    printf("Starting threads.\n");
    var tids *pthread_t = new [config.thread_count]pthread_t;
    var ptds *per_thread_data_t = new [config.thread_count]per_thread_data_t;
    for var i = 0; i < config.thread_count; ++i do
        ptds[i] =
            { &config,
              i,
              &state,
              { 0, 0, 0, 0, 0, 0 }
            };
        var ret = pthread_create(&tids[i], nil, thread, &ptds[i]);
        if ret != 0 then
            printf("error: failed to create thread id: %d\n", i);
            exit(1);
        fi
    od

    puts("begin");

    state = STATE_RUN;
    // Robust sleep against Forkscan signals.
    forkscan_sleep(config.duration_s);
    state = STATE_END;

    puts("end");
    printf("Joining threads.\n");
    for var i = 0; i < config.thread_count; ++i do
        var ret = pthread_join(tids[i], nil);
        if ret != 0 then
            printf("error: failed to join thread id: %d\n", i);
            exit(1);
        fi
        printf("[joined thread %d]\n", i);
    od

    // Print out the statistics.
    var totals stats_t = { 0, 0, 0, 0, 0, 0 };
    for var i = 0; i < config.thread_count; ++i do
        printf("statistics for thread %d\n", i);
        print_stats(&ptds[i].stats);
        totals.read_attempts += ptds[i].stats.read_attempts;
        totals.read_successes += ptds[i].stats.read_successes;
        totals.insert_attempts += ptds[i].stats.insert_attempts;
        totals.insert_successes += ptds[i].stats.insert_successes;
        totals.remove_attempts += ptds[i].stats.remove_attempts;
        totals.remove_successes += ptds[i].stats.remove_successes;
    od

    printf("total statistics:\n");
    print_stats(&totals);

    delete tids;
    delete ptds;
    return 0;
end

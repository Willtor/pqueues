/* Fixed height skiplist: A skiplist implementation with an array of "next"
 * nodes of fixed height.
 */

import "stdio.h";

typedef node_ptr = volatile*volatile node;

typedef node =
    { key      i64,            // Value.
      toplevel i32,            // Height.
      next     [20]node_ptr    // Follow-list of nodes.
    };

export opaque
typedef fhsl_lf =
    { head  node,
      tail  node
    };

/** Print out the contents of the skip list along with node heights.
 */
export
def fhsl_lf_print (set *fhsl_lf) -> void
begin
    var node = set.head.next[0];
    while unmark(node) != &set.tail do
        if is_marked(node.next[0]) then
            node = unmark(node).next[0];
        else
            node = unmark(node);
            printf("node[%d]: %lld\n", node.toplevel, node.key);
            node = node.next[0];
        fi
    od
end

def node_create(key i64, toplevel i32) -> node_ptr
begin
    var node = new node;
    node.key = key;
    node.toplevel = toplevel;
    return node;
end


/** Return a new fixed-height skip list.
 */
export
def fhsl_lf_create () -> *fhsl_lf
begin
    var fhsl_lf = new fhsl_lf;
    fhsl_lf.head.key = 0x8000000000000000I64;
    fhsl_lf.tail.key = 0x7FFFFFFFFFFFFFFFI64;
    for var i = 0; i < 20; ++i do
        fhsl_lf.head.next[i] = &fhsl_lf.tail;
        fhsl_lf.tail.next[i] = nil;
    od
    return fhsl_lf;
end


/** Return whether the skip list contains the value.
 */
export
def fhsl_lf_contains (set *fhsl_lf, x i64) -> bool
begin
    // FIXME: Nir's book does this differently.  Figure out whether this
    // still works and maybe replace.
    var node node_ptr = &set.head;
    for var level = 19; level >= 0; --level do
        var next = unmark(node.next[level]);
        while next.key <= x do
            node = next;
            next = unmark(node.next[level]);
        od
        if node.key == x then
            if !is_marked(node.next[0]) then return true; fi
            return false;
        fi
    od
    return false;
end

/** Add a node, lock-free, to the skiplist.
 */
export
def fhsl_lf_add (seed *u64, set *fhsl_lf, x i64) -> bool
begin
    var preds [20]node_ptr;
    var succs [20]node_ptr;
    var toplevel = random_level(seed, 20);
    var node node_ptr = nil;
    while true do
        if find(set, x, preds, succs) then
            delete node;
            return false;
        fi
        if node == nil then node = node_create(x, toplevel); fi
        for var i = 0; i <= toplevel; ++i do
            node.next[i] = succs[i];
        od
        var pred = preds[0];
        var succ = succs[0];
        if !__builtin_cas(&pred.next[0], succ, node) then
            continue;
        fi
        for var i = 1; i <= toplevel; ++i do
            while true do
                pred = preds[i];
                succ = succs[i];
                if __builtin_cas(&pred.next[i], succ, node) then
                    break;
                fi
                find(set, x, preds, succs);
            od
        od
        return true;
    od
end

/** Remove a node, lock-free, from the skiplist.
 */
export
def fhsl_lf_remove (set *fhsl_lf, x i64) -> bool
begin
    var preds [20]node_ptr;
    var succs [20]node_ptr;
    var succ node_ptr;
    while true do
        if false == find(set, x, preds, succs) then
            return false;
        fi
        var node_to_remove = succs[0];
        var marked bool;
        for var level = node_to_remove.toplevel;
            level >= 1;
            --level
        do
            succ = node_to_remove.next[level];
            marked = is_marked(succ);
            while !marked do
                __builtin_cas(&node_to_remove.next[level], succ,
                                mark(succ));
                succ = node_to_remove.next[level];
                marked = is_marked(succ);
            od
        od
        succ = node_to_remove.next[0];
        marked = is_marked(succ);
        if marked then return false; fi
        while true do
            var i_marked_it = __builtin_cas(&node_to_remove.next[0],
                                            succ, mark(succ));
            succ = succs[0].next[0];
            marked = is_marked(succ);
            if i_marked_it then
                // FIXME: succs[0]?  Should retire node_to_remove?
                retire node_to_remove;
                find(set, x, preds, succs);
                return true;
            elif marked then
                return false;
            fi
        od
    od
end

/** Remove a node, lock-free, from the skiplist.  Leak the memory.
 */
export
def fhsl_lf_leaky_remove (set *fhsl_lf, x i64) -> bool
begin
    var preds [20]node_ptr;
    var succs [20]node_ptr;
    var succ node_ptr;
    while true do
        if false == find(set, x, preds, succs) then
            return false;
        fi
        var node_to_remove = succs[0];
        var marked bool;
        for var level = node_to_remove.toplevel;
            level >= 1;
            --level
        do
            succ = node_to_remove.next[level];
            marked = is_marked(succ);
            while !marked do
                __builtin_cas(&node_to_remove.next[level], succ,
                                mark(succ));
                succ = node_to_remove.next[level];
                marked = is_marked(succ);
            od
        od
        succ = node_to_remove.next[0];
        marked = is_marked(succ);
        if marked then return false; fi
        while true do
            var i_marked_it = __builtin_cas(&node_to_remove.next[0],
                                            succ, mark(succ));
            succ = succs[0].next[0];
            marked = is_marked(succ);
            if i_marked_it then
                // FIXME: succs[0]?  Should retire node_to_remove?
                find(set, x, preds, succs);
                return true;
            elif marked then
                return false;
            fi
        od
    od
end

/** Pop the front node from the list.  Return true iff there was a node to pop.
 *  Leak the memory.
 */
export
def fhsl_lf_leaky_pop_min (set *fhsl_lf) -> bool
begin
    var preds [20]node_ptr;
    var succs [20]node_ptr;
    var succ node_ptr;

    while true do
        var node_to_remove = set.head.next[0];
        if node_to_remove == &set.tail then
            return false;
        fi

        for var level = node_to_remove.toplevel; level >= 0; --level do
            preds[level] = &set.head;
            succs[level] = node_to_remove;
        od

        for var level = node_to_remove.toplevel;
            level >= 1;
            --level
        do
            succ = node_to_remove.next[level];
            var marked = is_marked(succ);
            while !marked do
                __builtin_cas(&node_to_remove.next[level], succ,
                              mark(succ));
                succ = node_to_remove.next[level];
                marked = is_marked(succ);
            od
        od
        succ = node_to_remove.next[0];

        var marked = is_marked(succ);
        if !marked && __builtin_cas(&node_to_remove.next[0], succ, mark(succ))
        then
            find(set, node_to_remove.key, preds, succs);
            return true;
        fi
    od
end

/** Pop the front node from the list.  Return true iff there was a node to pop.
 *  Don't leak the memory.
 */
export
def fhsl_lf_pop_min (set *fhsl_lf) -> bool
begin
    var preds [20]node_ptr;
    var succs [20]node_ptr;
    var succ node_ptr;

    while true do
        var node_to_remove = set.head.next[0];
        if node_to_remove == &set.tail then
            return false;
        fi

        for var level = node_to_remove.toplevel; level >= 0; --level do
            preds[level] = &set.head;
            succs[level] = node_to_remove;
        od

        for var level = node_to_remove.toplevel;
            level >= 1;
            --level
        do
            succ = node_to_remove.next[level];
            var marked = is_marked(succ);
            while !marked do
                __builtin_cas(&node_to_remove.next[level], succ,
                              mark(succ));
                succ = node_to_remove.next[level];
                marked = is_marked(succ);
            od
        od
        succ = node_to_remove.next[0];

        var marked = is_marked(succ);
        if !marked && __builtin_cas(&node_to_remove.next[0], succ, mark(succ))
        then
            find(set, node_to_remove.key, preds, succs);
            retire node_to_remove;
            return true;
        fi
    od
end

def fast_rand (seed *u64) -> u64
begin
    var key = seed[0];
    if key == 0 then key = 1; fi

    key ^= key << 6;
    key ^= key >> 21;
    key ^= key << 7;

    seed[0] = key;
    return key;
end

def random_level (seed *u64, max u32) -> u32
begin
    var level = 1;
    while fast_rand(seed) % 2 == 0 && level < max do
        ++level;
    od
    return level - 1;
end

def find (set *fhsl_lf,
          key i64,
          preds [20]node_ptr,
          succs [20]node_ptr) -> bool
begin
    var marked, snip bool;
    var left, succ node_ptr = nil, nil;
retry:
    while true do
        left = &set.head;
        for var level = 19; level >= 0; --level do
            var left_next = left.next[level];
            if is_marked(left_next) then goto retry; fi
            var right = left_next;
            while true do
                var right_next = right.next[level];
                while is_marked(right_next) do
                    right = unmark(right_next);
                    right_next = right.next[level];
                od
                if right.key < key then
                    left = right;
                    left_next = right_next;
                    right = right_next;
                else
                    break;
                fi
            od
            if left_next != right then
                var success = __builtin_cas(&left.next[level], left_next, right);
                if !success then goto retry; fi
            fi
            preds[level] = left;
            succs[level] = right;
        od
        return succs[0].key == key;
    od
end

def ref_and_markbit (ptr node_ptr) -> { node_ptr, bool } =
    { unmark(ptr), is_marked(ptr) };

def mark (ptr node_ptr) -> node_ptr =
    cast node_ptr (0x1I64 | cast i64 (ptr));

def unmark (ptr node_ptr) -> node_ptr =
    cast node_ptr (0xFFFFFFFFFFFFFFFEI64 & cast i64 (ptr));

def is_marked (ptr node_ptr) -> bool =
    cast bool (0x1I64 & cast i64 (ptr));

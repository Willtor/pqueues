import "forkscan.defi";
import "malloc.h";
import "pthread.h";
import "stdio.h";
import "stdlib.h";
import "time.h";
import "thread_pinner.h";
import "papi_interface.h";

// Set data structures:
import "fhsl_lf.defi";
import "c_fhsl_lf.h";
import "fhsl_b.defi";
import "fhsl_tx.defi";
import "c_fhsl_tx.h";
import "stacktrack/skip-list.h";
import "bt_lf.defi";
import "bt_tx.defi";
import "c_bt_lf.h";
import "c_fhsl_fc.h";

typedef benchmark_t = enum
    | FHSL_LF
    | FHSL_B
    | FHSL_TX
    | C_FHSL_LF
    | C_FHSL_TX
    | STACKTRACK
    | BT_LF
    | BT_TX
    | C_BT_LF
    | C_FHSL_FC
    ;

typedef memory_policy_t = enum
    | POLICY_LEAKY
    | POLICY_RETIRE
    | POLICY_HAZARD
    | POLICY_STACKTRACK
    ;

typedef state_t = enum
    | STATE_WAIT
    | STATE_RUN
    | STATE_END
    ;

typedef config_t =
    {
        benchmark      benchmark_t,
        policy         memory_policy_t,
        csv            bool,
        duration_s     i32,
        thread_count   i32,
        init_size      i64,
        upper_bound    i64,
        update_rate    i32,
        set            *void
    };

typedef stats_t =
    {
        read_attempts     i64,
        read_successes    i64,
        insert_attempts   i64,
        insert_successes  i64,
        remove_attempts   i64,
        remove_successes  i64
    };

typedef per_thread_data_t =
    {
        config         *config_t,
        id             i32,
        state          volatile *state_t,
        stats          stats_t,
        PAPI_counters  *i64
    };

typedef init_thread_data_t =
    {
        config        *config_t,
        total_threads i64,
        id            i64
    };

@[define [default-call fname]
   [parse-expr @[emit-ident fname](set, val) ]]
@[define [seed-call fname]
   [parse-expr @[emit-ident fname](&seed, set, val) ]]
@[define [stacktrack-call fname]
   [parse-expr 0 == @[emit-ident fname](st_thread, set, val) ]]
@[define [stacktrack-call-ptr fname]
   [parse-expr nil == @[emit-ident fname](st_thread, set, val) ]]
@[define [flatcombining-call fname]
   [parse-expr @[emit-ident fname](set, val, ptd.id) ]]

@[define benchmarks
   `[["FHSL_LF" "POLICY_LEAKY"
       [default-call "fhsl_lf_contains"]
       [seed-call "fhsl_lf_add"]
       [default-call "fhsl_lf_leaky_remove"]]
     ["FHSL_LF" "POLICY_RETIRE"
       [default-call "fhsl_lf_contains"]
       [seed-call "fhsl_lf_add"]
       [default-call "fhsl_lf_remove"]]
     ["C_FHSL_LF" "POLICY_LEAKY"
       [default-call "c_fhsl_lf_contains"]
       [seed-call "c_fhsl_lf_add"]
       [default-call "c_fhsl_lf_remove_leaky"]]
     ["FHSL_B" "POLICY_LEAKY"
       [default-call "fhsl_b_contains"]
       [seed-call "fhsl_b_add"]
       [default-call "fhsl_b_leaky_remove"]]
     ["FHSL_B" "POLICY_RETIRE"
       [default-call "fhsl_b_contains"]
       [seed-call "fhsl_b_add"]
       [default-call "fhsl_b_remove"]]
     ["FHSL_TX" "POLICY_LEAKY"
       [default-call "fhsl_tx_contains"]
       [seed-call "fhsl_tx_add"]
       [default-call "fhsl_tx_leaky_remove"]]
     ["FHSL_TX" "POLICY_RETIRE"
       [default-call "fhsl_tx_contains"]
       [seed-call "fhsl_tx_add"]
       [default-call "fhsl_tx_remove"]]
     ["C_FHSL_TX" "POLICY_LEAKY"
       [default-call "c_fhsl_tx_contains"]
       [seed-call "c_fhsl_tx_add"]
       [default-call "c_fhsl_tx_remove_leaky"]]
     ["STACKTRACK" "POLICY_LEAKY"
       [stacktrack-call "skiplist_contains_pure"]
       [stacktrack-call-ptr "skiplist_insert_pure"]
       [stacktrack-call "skiplist_remove_pure"]]
     ["STACKTRACK" "POLICY_RETIRE"
       [stacktrack-call "skiplist_contains_forkscan"]
       [stacktrack-call-ptr "skiplist_insert_forkscan"]
       [stacktrack-call "skiplist_remove_forkscan"]]
     ["STACKTRACK" "POLICY_HAZARD"
       [stacktrack-call "skiplist_contains_hp"]
       [stacktrack-call-ptr "skiplist_insert_hp"]
       [stacktrack-call "skiplist_remove_hp"]]
     ["STACKTRACK" "POLICY_STACKTRACK"
       [stacktrack-call "skiplist_contains_stacktrack"]
       [stacktrack-call-ptr "skiplist_insert_stacktrack"]
       [stacktrack-call "skiplist_remove_stacktrack"]]
     ["BT_LF" "POLICY_LEAKY"
       [default-call "bt_lf_contains"]
       [default-call "bt_lf_add"]
       [default-call "bt_lf_remove"]]
     ["C_BT_LF" "POLICY_LEAKY"
       [default-call "c_bt_lf_contains"]
       [default-call "c_bt_lf_add"]
       [default-call "c_bt_lf_remove_leaky"]]
     ["BT_TX" "POLICY_LEAKY"
       [default-call "bt_tx_contains"]
       [default-call "bt_tx_add"]
       [default-call "bt_tx_remove_leaky"]]
     ["BT_TX" "POLICY_RETIRE"
       [default-call "bt_tx_contains"]
       [default-call "bt_tx_add"]
       [default-call "bt_tx_remove_retire"]]
     ["C_FHSL_FC" "POLICY_LEAKY"
       [flatcombining-call "c_fhsl_fc_contains"]
       [flatcombining-call "c_fhsl_fc_add"]
       [flatcombining-call "c_fhsl_fc_remove"]]
    ]
 ]

@[define [make-bench contains insert remove]
   [parse-stmts
     while ptd.state[0] == STATE_RUN do
         var action = fast_rand(&seed) % 100;
         var val i64 = fast_rand(&seed) % config.upper_bound;
         if action < read_action then
             stats.read_attempts++;
             if @[emit-expr contains] then
                 stats.read_successes++;
             fi
         elif action < add_action then
             stats.insert_attempts++;
             if @[emit-expr insert] then
                 stats.insert_successes++;
             fi
         else
             stats.remove_attempts++;
             if @[emit-expr remove] then
                 stats.remove_successes++;
             fi
         fi
     od
   ]
 ]

@[define [config2bench config]
   [let* [[bench [car config]]
          [policy [car [cdr config]]]
          [contains [car [cdr [cdr config]]]]
          [insert [car [cdr [cdr [cdr config]]]]]
          [remove [car [cdr [cdr [cdr [cdr config]]]]]]
         ]
     [list [parse-expr @[emit-ident bench] == config.benchmark
                       && @[emit-ident policy] == config.policy]
           [make-bench contains insert remove]
     ]
   ]
 ]

/** Return the time in seconds.
 */
def hires_timer () -> f64
begin
    var ts timespec;
    // FIXME: Need a convenient way to access C MACROs.
    if 0 != clock_gettime(/*CLOCK_MONOTONIC=*/1, &ts) then
        fprintf(stderr, "fatal: clock failed.\n");
        exit(1);
    fi
    var sec = cast f64 (ts.tv_sec);
    var nsec = cast f64 (ts.tv_nsec);
    return sec + nsec / (1000.0 * 1000.0 * 1000.0);
end

def fast_rand (seed *u64) -> u64
begin
    var val = seed[0];
    if val == 0 then val = 1; fi

    val ^= val << 6;
    val ^= val >> 21;
    val ^= val << 7;

    seed[0] = val;
    return val;
end

def string_of_benchmark (b benchmark_t) -> *char
begin
    switch b with
    xcase FHSL_LF: return "fhsl_lf";
    xcase FHSL_B: return "fhsl_b";
    xcase FHSL_TX: return "fhsl_tx";
    xcase C_FHSL_LF: return "c_fhsl_lf";
    xcase C_FHSL_TX: return "c_fhsl_tx";
    xcase STACKTRACK: return "stacktrack";
    xcase C_BT_LF: return "bt_lf";
    xcase BT_LF: return "bt_lf";
    xcase BT_TX: return "bt_tx";
    xcase C_FHSL_FC: return "c_fhsl_fc";
    xcase _: return "unknown benchmark";
    esac
end

def string_of_policy (p memory_policy_t) -> *char
begin
    switch p with
    xcase POLICY_LEAKY: return "leaky";
    xcase POLICY_RETIRE: return "retire";
    xcase POLICY_HAZARD: return "hazard";
    xcase POLICY_STACKTRACK: return "stacktrack";
    xcase _: return "unknown policy";
    esac
end

def help (bench *char) -> void
begin
    printf("Usage: %s [OPTIONS]\n", bench);
    printf("  -h, --help: This help message.\n");
    printf("  -t <n>: Set the number of threads. (default = 1)\n");
    printf("  -d <n>: Benchmark duration in seconds. (default = 1)\n");
    printf("  -b <benchmark>: Set the benchmark. (default = fhsl_lf)\n");
    printf("     * fhsl_lf: Fixed-height skip list; lock-free.\n");
    printf("     * fhsl_b: Fixed-height skip list; blocking.\n");
    printf("     * c_fhsl_lf: Fixed-height skip list; lock-free, written in C.\n");
    printf("     * fhsl_tx: Fixed-height skip list; transactional.\n");
    printf("     * stacktrack: Use the StackTrack skiplist written in C.\n");
    printf("     * bt_lf: Use the lock-free binary tree written in DEF.\n");
    printf("     * bt_tx: Use the transactional binary tree written in DEF.\n");
    printf("     * c_bt_lf: Use the lock-free binary tree written in C.\n");
    printf("     * c_fhsl_fc: Use the flat combining skiplist written in C.\n");
    printf("  -p <mem_policy>: Set the memory policy. (default = leaky)\n");
    printf("     * leaky: Leak removed nodes.\n");
    printf("     * retire: Use Forkscan to reclaim removed nodes.\n");
    printf("     * hazard: Hazard pointers (for stacktrack bench only).\n");
    printf("     * stacktrack: StackTrack (for stacktrack bench only).\n");
    printf("  -i <n>: Initial set size. (default = 256)\n");
    printf("  -r <n>: Range upper bound [0-n). (default = 512)\n");
    printf("  -u <n>: Percent of ops that are updates. (default = 10)\n");
    printf("  --csv: Generate a comma-separated value summary.\n");
    exit(127);
end

/** Parse an i32 from txt in the range [low, high].  The err text is the
 *  command line option and is used in case of failure.
 */
def read_i32 (low i32, high i32, txt *char, err *char) -> i32
begin
    var n = atoi(txt);
    if n < low || n > high then
        fprintf(stderr, "error: %s requires an argument between %d and %d\n",
                err, low, high);
        exit(1);
    fi
    return n;
end

/** Parse an i64 from txt in the range [low, high].  The err text is the
 *  command line option and is used in case of failure.
 */
def read_i64 (low i64, high i64, txt *char, err *char) -> i64
begin
    var n = atoll(txt);
    if n < low || n > high then
        fprintf(stderr, "error: %s requires an argument between %lld and %lld\n",
                err, low, high);
        exit(1);
    fi
    return n;
end

def read_args (argc i32, argv **char) -> config_t
begin
    var config config_t =
        { FHSL_LF, POLICY_LEAKY, false, 1, 1, 256, 512, 10, nil };

    for var i = 1; i < argc; ++i do
        switch argv[i] with
        xcase "-h":
        ocase "--help":
            help(argv[0]); // no return.
        xcase "-t":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -t requires an argument.\n");
                exit(1);
            fi
            config.thread_count = read_i32(1, 256, argv[i], "-t");
        xcase "-d":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -d requires an argument.\n");
                exit(1);
            fi
            config.duration_s = read_i32(1, 999, argv[i], "-d");
        xcase "-b":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -b requires an argument.\n");
                exit(1);
            fi
            switch argv[i] with
            xcase "fhsl_lf": config.benchmark = FHSL_LF;
            xcase "fhsl_b": config.benchmark = FHSL_B;
            xcase "c_fhsl_lf": config.benchmark = C_FHSL_LF;
            xcase "fhsl_tx": config.benchmark = FHSL_TX;
            xcase "c_fhsl_tx": config.benchmark = C_FHSL_TX;
            xcase "stacktrack": config.benchmark = STACKTRACK;
            xcase "bt_lf": config.benchmark = BT_LF;
            xcase "c_bt_lf": config.benchmark = C_BT_LF;
            xcase "bt_tx": config.benchmark = BT_TX;
            xcase "c_fhsl_fc": config.benchmark = C_FHSL_FC;
            xcase _:
                printf("unknown benchmark: %s\n", argv[i]);
                exit(1);
            esac
        xcase "-p":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -b requires an argument.\n");
                exit(1);
            fi
            switch argv[i] with
            xcase "leaky": config.policy = POLICY_LEAKY;
            xcase "retire":
            ocase "forkscan":
                config.policy = POLICY_RETIRE;
            xcase "hazard": config.policy = POLICY_HAZARD;
            xcase "stacktrack": config.policy = POLICY_STACKTRACK;
            xcase _:
                printf("unknown memory policy: %s\n", argv[i]);
                exit(1);
            esac
        xcase "-i":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -i requires an argument.\n");
                exit(1);
            fi
            config.init_size =
                read_i64(1, 0x7FFFFFFFFFFFFFFFI64, argv[i], "-i");
        xcase "-r":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -r requires an argument.\n");
                exit(1);
            fi
            config.upper_bound =
                read_i64(1, 0x7FFFFFFFFFFFFFFFI64, argv[i], "-r");
        xcase "-u":
            ++i;
            if i >= argc then
                fprintf(stderr, "error: -u requires an argument.\n");
                exit(1);
            fi
            config.update_rate = read_i32(0, 100, argv[i], "-u");
        xcase "--csv":
            config.csv = true;
        xcase _:
            printf("unknown option: %s\n", argv[i]);
            exit(1);
        esac
    od

    return config;
end

def verify_config (config *config_t) -> void
begin
    // Be sure the configuration is valid -- i.e., does the given data
    // structure support the requested memory policy, etc.?

    switch { config.benchmark, config.policy } with
    xcase { FHSL_LF, POLICY_LEAKY }:
    ocase { FHSL_LF, POLICY_RETIRE }:
    ocase { FHSL_B, POLICY_LEAKY }:
    ocase { FHSL_B, POLICY_RETIRE }:
    ocase { C_FHSL_LF, POLICY_LEAKY}:
    ocase { FHSL_TX, POLICY_LEAKY }:
    ocase { FHSL_TX, POLICY_RETIRE }:
    ocase { C_FHSL_TX, POLICY_LEAKY}:
    ocase { STACKTRACK, POLICY_LEAKY }:
    ocase { STACKTRACK, POLICY_RETIRE }:
    ocase { STACKTRACK, POLICY_HAZARD }:
    ocase { STACKTRACK, POLICY_STACKTRACK }:
    ocase { C_BT_LF, POLICY_LEAKY}:
    ocase { C_BT_LF, POLICY_RETIRE}:
    ocase { BT_LF, POLICY_LEAKY}:
    ocase { BT_LF, POLICY_RETIRE}:
    ocase { BT_TX, POLICY_LEAKY }:
    ocase { BT_TX, POLICY_RETIRE }:
    ocase { C_FHSL_FC, _ }:
    xcase _:
        printf("Unsupported configuration:\n");
        printf("  benchmark: %s\n  policy: %s\n",
               string_of_benchmark(config.benchmark),
               string_of_policy(config.policy));
        printf("No implementation for this combination.\n");
        exit(1);
    esac
end

def print_config (config *config_t) -> void
begin
    printf("Benchmark configuration\n");
    printf("--------- -------------\n");
    printf("  benchmark    : %s\n", string_of_benchmark(config.benchmark));
    printf("  mem_policy   : %s\n", string_of_policy(config.policy));
    printf("  duration (s) : %d\n", config.duration_s);
    printf("  thread count : %d\n", config.thread_count);
    printf("  initial size : %lld\n", config.init_size);
    printf("  range        : [0-%lld)\n", config.upper_bound);
    printf("  updates      : %d%%\n", config.update_rate);

    puts(""); // blank line.
end

def success_rate (attempts i64, successes i64) -> f64
begin
    if attempts == 0 then return 0.0F64; fi
    return cast f64 (successes) * 100.0F64 / cast f64 (attempts);
end

def print_stats (stats *stats_t, runtime f64, PAPI_counters *i64) -> void
begin
    var total_ops i64 = 0;
    printf("  read-attempts      : %lld\n", stats.read_attempts);
    printf("  read-successes     : %lld (%.1f%%)\n", stats.read_successes,
           success_rate(stats.read_attempts, stats.read_successes));
    printf("  reads-per-second   : %lld\n",
           cast i64 (stats.read_successes / runtime));
    printf("  insert-attempts    : %lld\n", stats.insert_attempts);
    printf("  insert-successes   : %lld (%.1f%%)\n", stats.insert_successes,
           success_rate(stats.insert_attempts, stats.insert_successes));
    printf("  inserts-per-second : %lld\n",
           cast i64 (stats.insert_successes / runtime));
    printf("  remove-attempts    : %lld\n", stats.remove_attempts);
    printf("  remove-successes   : %lld (%.1f%%)\n", stats.remove_successes,
           success_rate(stats.remove_attempts, stats.remove_successes));
    printf("  removes-per-second : %lld\n",
           cast i64 (stats.remove_successes / runtime));

    total_ops = stats.read_attempts
        + stats.insert_attempts
        + stats.remove_attempts;
    var total_opsf = cast f64 (total_ops);

    printf("  total-operations   : %lld\n", total_ops);
    printf("  ops-per-second     : %lld\n",
           cast i64 (total_ops / runtime));
    printf("L1 cache misses per op %f\nL2 cache misses per op %f\nInstruction stalls per op %f\nTotal instructions per op %f\nL1 data cache misses per op %f\n",
        PAPI_counters[0] / total_opsf,
        PAPI_counters[1] / total_opsf,
        PAPI_counters[2] / total_opsf,
        PAPI_counters[3] / total_opsf,
        PAPI_counters[4] / total_opsf);
end

def print_csv (config *config_t, stats *stats_t, runtime f64) -> void
begin
    puts("# fields: name, benchmark, policy, threads, init_size, upper_bound, update_rate, ops/sec");

    var total_ops = stats.read_attempts
        + stats.insert_attempts
        + stats.remove_attempts;

    printf("pqueue_bench, %s, %s, %d, %lld, %lld, %d, %lld\n",
           string_of_benchmark(config.benchmark),
           string_of_policy(config.policy),
           config.thread_count,
           config.init_size,
           config.upper_bound,
           config.update_rate,
           cast i64 (total_ops / runtime));
end

def thread (arg *void) -> *void
begin
    var ptd = cast volatile *per_thread_data_t (arg);
    var seed = cast u64 (time(nil)) + ptd.id;
    var stats stats_t = { 0, 0, 0, 0, 0, 0 };
    var config *config_t = ptd.config;
    var bench = config.benchmark;
    var policy = config.policy;
    var set = config.set;

    // StackTrack, since it was originally part of a different benchmark, does
    // things differently.  We aim to please.
    var st_thread *st_thread_t = nil;
    if bench == STACKTRACK then
        var st_seed = cast i32 (seed);
        st_thread = new st_thread_t;
        ST_thread_init(st_thread, &st_seed, 50, 100);
    fi

    printf("[started thread %d]\n", ptd.id);
    while ptd.state[0] == STATE_WAIT do
        // busy-wait.
    od
    var read_action = 100 - config.update_rate;
    var add_action = read_action + (config.update_rate / 2);
    
    var register_res = register_thread();
    var start_res = start_counters();
    @[construct-if [map config2bench benchmarks]]
    ptd.PAPI_counters = stop_counters();

    printf("FINISHED\n");
    if bench == STACKTRACK then
        // Cleanup StackTrack.
        ST_thread_finish(st_thread);
        delete st_thread;
    fi

    // Store this thread's statistics in the per-thread-data.
    ptd.stats = stats;
    return nil;
end


def thread_initialise(arg *void) -> *void 
begin
    var thread_data *init_thread_data_t = cast *init_thread_data_t (arg);
    var config *config_t = thread_data.config;
    var seed u64 = cast u64 (time(nil)) + thread_data.id;
    var bound = config.init_size;
    var thread_slice = bound / thread_data.total_threads;
    var extra = bound % thread_data.total_threads;
    var from = thread_slice * thread_data.id;
    var to = from + thread_slice;
    if thread_data.id == (thread_data.total_threads - 1) then to += extra; fi
    var upper_bound = config.upper_bound;
    
    var st_thread *st_thread_t = nil;
    if config.benchmark == STACKTRACK then
        var st_seed = cast i32 (seed);
        st_thread = new st_thread_t;
        ST_thread_init(st_thread, &st_seed, 50, 100);
    fi

    var iterations = 0;
    while from < to do
        var val i64 = fast_rand(&seed) % upper_bound;
        var res = false;
        switch config.benchmark with
        xcase FHSL_LF:
            res = fhsl_lf_add(&seed, config.set, val);
        xcase C_FHSL_LF:
            res = c_fhsl_lf_add(&seed, config.set, val);
        xcase FHSL_B:
            res = fhsl_b_add(&seed, config.set, val);
        xcase FHSL_TX:
            res = fhsl_tx_add(&seed, config.set, val);
        xcase C_FHSL_TX:
            res = c_fhsl_tx_add(&seed, config.set, val);
        xcase C_FHSL_LF:
            res = c_fhsl_lf_add(&seed, config.set, val) == 1;
        xcase STACKTRACK:
            switch config.policy with
            xcase POLICY_LEAKY:
                res = nil == skiplist_insert_pure(st_thread, config.set, val);
            xcase POLICY_RETIRE:
                res = nil == skiplist_insert_forkscan(st_thread, config.set, val);
            xcase POLICY_HAZARD:
                res = nil == skiplist_insert_hp(st_thread, config.set, val);
            xcase POLICY_STACKTRACK:
                res = nil == skiplist_insert_stacktrack(st_thread, config.set, val);
            xcase _:
                printf("error: unsupported mem policy for stacktrack.");
                exit(1);
            esac
        xcase BT_LF:
            res = bt_lf_add(config.set, val);
        xcase BT_TX:
            res = bt_tx_add(config.set, val);
        xcase C_BT_LF:
            res = c_bt_lf_add(config.set, val) == 1;
        xcase C_FHSL_FC:
            res = c_fhsl_fc_add(config.set, val, 0) == 1;
        xcase _:
            printf("error: unable to initialize unknown set.\n");
        esac
        if res then
            from++;
        fi
    od
    
    if config.benchmark == STACKTRACK then
        ST_thread_finish(st_thread);
        delete st_thread;
    fi

    return nil;
end

def initialize_structure(config *config_t, seed *u64) -> void
begin
    switch config.benchmark with
    xcase FHSL_LF:
        config.set = fhsl_lf_create();
    xcase FHSL_B:
        config.set = fhsl_b_create();
    xcase FHSL_TX:
        config.set = fhsl_tx_create();
    xcase C_FHSL_TX:
        config.set = c_fhsl_tx_create();
    xcase C_FHSL_LF:
        config.set = c_fhsl_lf_create();
    xcase STACKTRACK:
        config.set = skiplist_init();
    xcase BT_LF:
        switch config.policy with
        xcase POLICY_LEAKY:
            config.set = bt_lf_create(true);
        xcase POLICY_RETIRE:
            config.set = bt_lf_create(false);
        xcase _:
            printf("error: unsupported mem policy for benchmark.\n");
            exit(1);
        esac
    xcase BT_TX:
        config.set = bt_tx_create();
    xcase C_BT_LF:
        config.set = c_bt_lf_create();
    xcase C_FHSL_FC:
        config.set = c_fhsl_fc_create(config.thread_count);
    xcase _:
        printf("error: unable to initialize unknown set.\n");
        exit(1);
    esac
    
    var num_threads = get_num_cores();
    // Let's not totally flood this thing...
    if num_threads > 16 then
        num_threads = 16;
    fi
    num_threads = 1;
    printf("Init threads %ld\n", num_threads);
    var thread_data *init_thread_data_t = new [num_threads]init_thread_data_t;
    var tids *pthread_t = new [num_threads]pthread_t;
    for var i = 0; i < num_threads; ++i do
        thread_data[i] = {config, num_threads, i};
        var ret = pthread_create(&tids[i], nil, thread_initialise, &thread_data[i]);
        if ret != 0 then
            printf("error: failed to create thread id: %d\n", i);
            exit(1);
        fi
    od
    printf("joining initialisation threads...\n");
    for var i = 0; i < num_threads; ++i do
        var ret = pthread_join(tids[i], nil);
        if ret != 0 then
            printf("error: failed to join thread id: %d\n", i);
            exit(1);
        fi
    od
    printf("initialisation threads joined\n");
    delete thread_data;
    delete tids;
end

export
def main (argc i32, argv **char) -> i32
begin
    var config = read_args(argc, argv);
    var seed = cast u64 (time(nil));
    var state = STATE_WAIT;

    forkscan_set_allocator(malloc, free, malloc_usable_size);

    verify_config(&config);
    print_config(&config);

    var res = library_init();
    printf("%d\n", res);

    printf("Initializing set.\n");
    initialize_structure(&config, &seed);

    printf("Starting threads.\n");
    var tids *pthread_t = new [config.thread_count]pthread_t;
    var ptds *per_thread_data_t = new [config.thread_count]per_thread_data_t;
    for var i = 0; i < config.thread_count; ++i do
        ptds[i] =
            { &config,
              i,
              &state,
              { 0, 0, 0, 0, 0, 0 },
              new [5]i64
            };
        var ret = pthread_create(&tids[i], nil, thread, &ptds[i]);
        if ret != 0 then
            printf("error: failed to create thread id: %d\n", i);
            exit(1);
        fi
    od

    puts("beginning");

    var start_time = hires_timer();
    state = STATE_RUN;
    // Robust sleep against Forkscan signals.
    forkscan_sleep(config.duration_s);
    state = STATE_END;

    puts("ending");
    printf("Joining threads.\n");
    for var i = 0; i < config.thread_count; ++i do
        var ret = pthread_join(tids[i], nil);
        if ret != 0 then
            printf("error: failed to join thread id: %d\n", i);
            exit(1);
        fi
        printf("[joined thread %d]\n", i);
    od
    var runtime = hires_timer() - start_time;

    // Print out the statistics.
    puts("Summary:");
    printf("  runtime (s) : %.9f\n", runtime);
    var PAPI_counters = new [5]i64;
    for var j = 0; j < 5; j++ do PAPI_counters[j] = 0; od
    var totals stats_t = { 0, 0, 0, 0, 0, 0 };
    for var i = 0; i < config.thread_count; ++i do
        printf("statistics for thread %d\n", i);
        print_stats(&ptds[i].stats, runtime, ptds[i].PAPI_counters);
        totals.read_attempts += ptds[i].stats.read_attempts;
        totals.read_successes += ptds[i].stats.read_successes;
        totals.insert_attempts += ptds[i].stats.insert_attempts;
        totals.insert_successes += ptds[i].stats.insert_successes;
        totals.remove_attempts += ptds[i].stats.remove_attempts;
        totals.remove_successes += ptds[i].stats.remove_successes;
        for var j = 0; j < 5; j++ do
            PAPI_counters[j] += ptds[i].PAPI_counters[j];
        od
    od

    printf("total statistics:\n");
    print_stats(&totals, runtime, PAPI_counters);
    if config.csv then print_csv(&config, &totals, runtime); fi

    delete tids;
    delete ptds;
    delete PAPI_counters;
    return 0;
end

/* A Shavit Lotan priority queue written in DEF.
 * Like the original description in the paper this queue has a skiplist
 * as the underlying data-structure for ordering elements.
 * The data-structure is lock-free and quiescently consistent.
 */

import "stdio.h";
import "assert.h";

typedef state_t = enum
    | ACTIVE
    | DELETED
    ;

typedef node_ptr = volatile * volatile node;

typedef node =
    { priority      i64,            // Value.
      state volatile state_t,  // Logical deletion state.
      toplevel i32,            // Height.
      next     [20]node_ptr    // Follow-list of nodes.
    };


export opaque
typedef sl_pq_t =
    { head  node,
      tail  node
    };

export
def sl_pq_print (pqueue *sl_pq_t) -> void
begin
    var node = pqueue.head.next[0];
    while unmark(node) != &pqueue.tail do
        if is_marked(node.next[0]) then
            node = unmark(node).next[0];
        else
            node = unmark(node);
            printf("node[%d]: %lld\n", node.toplevel, node.priority);
            node = node.next[0];
        fi
    od
end


export
def sl_pq_create () -> *sl_pq_t
begin
    var slpq = new sl_pq_t;
    slpq.head.priority = 0x8000000000000000I64;
    slpq.tail.priority = 0x7FFFFFFFFFFFFFFFI64;
    for var i = 0; i < 20; ++i do
        slpq.head.next[i] = &slpq.tail;
        slpq.tail.next[i] = nil;
    od
    return slpq;
end

def node_create(priority i64, toplevel i32) -> node_ptr
begin
    var node = new node;
    node.priority = priority;
    node.toplevel = toplevel;
    return node;
end

export
def sl_pq_add (seed *u64, pqueue *sl_pq_t, x i64) -> bool
begin
    var preds [20]node_ptr;
    var succs [20]node_ptr;
    var toplevel = random_level(seed, 20);
    var node node_ptr = nil;
    while true do
        if true == find(pqueue, x, preds, succs) then
            delete node;
            return false;
        fi
        var node = new node;
        node.priority = x;
        node.toplevel = toplevel;
        if node == nil then node = node_create(x, toplevel); fi
        for var i = 0; i <= toplevel; ++i do
            node.next[i] = unmark(succs[i]);
        od
        var pred = preds[0];
        var succ = succs[0];
        if !__builtin_cas(&pred.next[0], unmark(succ), node) then
            continue;
        fi
        for var i = 1; i <= toplevel; ++i do
            while true do
                pred = preds[i];
                succ = succs[i];
                if __builtin_cas(&pred.next[i], unmark(succ), node) then
                    break;
                fi
                find(pqueue, x, preds, succs);
            od
        od
        return true;
    od
end

/** Remove a node, lock-free, from the skiplist.
 */
export
def sl_pq_remove (pqueue *sl_pq_t, x i64) -> bool
begin
    var preds [20]node_ptr;
    var succs [20]node_ptr;
    var succ node_ptr;
    while true do
        if false == find(pqueue, x, preds, succs) then
            return false;
        fi
        var node_to_remove = succs[0];
        var marked bool;
        for var level = node_to_remove.toplevel;
            level >= 1;
            --level
        do
            succ = node_to_remove.next[level];
            marked = is_marked(succ);
            while !marked do
                __builtin_cas(&node_to_remove.next[level], unmark(succ),
                                mark(succ));
                succ = node_to_remove.next[level];
                marked = is_marked(succ);
            od
        od
        succ = node_to_remove.next[0];
        marked = is_marked(succ);
        while true do
            var i_marked_it = __builtin_cas(&node_to_remove.next[0],
                                            unmark(succ), mark(succ));
            succ = succs[0].next[0];
            marked = is_marked(succ);
            if i_marked_it then
                retire succs[0];
                find(pqueue, x, preds, succs);
                return true;
            elif marked then
                return false;
            fi
        od
    od
end

/** Remove a node, lock-free, from the skiplist.  Leak the memory.
 */
export
def sl_pq_leaky_remove (pqueue *sl_pq_t, x i64) -> bool
begin
    var preds [20]node_ptr;
    var succs [20]node_ptr;
    var succ node_ptr;
    while true do
        if false == find(pqueue, x, preds, succs) then
            return false;
        fi
        var node_to_remove = succs[0];
        var marked bool;
        for var level = node_to_remove.toplevel;
            level >= 1;
            --level
        do
            succ = node_to_remove.next[level];
            marked = is_marked(succ);
            while !marked do
                __builtin_cas(&node_to_remove.next[level], unmark(succ),
                                mark(succ));
                succ = node_to_remove.next[level];
                marked = is_marked(succ);
            od
        od
        succ = node_to_remove.next[0];
        marked = is_marked(succ);
        while true do
            var i_marked_it = __builtin_cas(&node_to_remove.next[0],
                                            unmark(succ), mark(succ));
            succ = succs[0].next[0];
            marked = is_marked(succ);
            if i_marked_it then
                find(pqueue, x, preds, succs);
                return true;
            elif marked then
                return false;
            fi
        od
    od
end

/** Pop the front node from the list.  Return true iff there was a node to pop.
 *  Leak the memory.
 */
export
def sl_pq_leaky_pop_min (pqueue *sl_pq_t) -> i64
begin
    for var curr = unmark(pqueue.head.next[0]); curr != &pqueue.tail; curr = unmark(curr.next[0]) do
        if curr.state == DELETED then
            mark_pointers(curr);
            continue;
        fi
        // TODO: Swap out for atomic swap
        var popped = curr.priority;
        var res = __builtin_swap(&curr.state, DELETED);
        if res == ACTIVE then
            mark_pointers(curr);
            return popped;
        fi
    od
    return 0;
end

/** Pop the front node from the list.  Return true iff there was a node to pop.
 *  Don't leak the memory.
 */
export
def sl_pq_pop_min (pqueue *sl_pq_t) -> i64
begin
    for var curr = unmark(pqueue.head.next[0]); curr != &pqueue.tail; curr = unmark(curr.next[0]) do
        if curr.state == DELETED then
            mark_pointers(curr);
            continue;
        fi
        // TODO: Swap out for atomic swap
        var res = __builtin_swap(&curr.state, DELETED);
        if res == ACTIVE then
            mark_pointers(curr);
            var popped = curr.priority;
            retire curr;
            return popped;
        fi
    od
    return 0;
end

def fast_rand (seed *u64) -> u64
begin
    var priority = seed[0];
    if priority == 0 then priority = 1; fi

    priority ^= priority << 6;
    priority ^= priority >> 21;
    priority ^= priority << 7;

    seed[0] = priority;
    return priority;
end

def random_level (seed *u64, max u32) -> u32
begin
    var level = 1;
    while fast_rand(seed) % 2 == 0 && level < max do
        ++level;
    od
    return level - 1;
end

def find (pqueue *sl_pq_t,
          priority i64,
          preds [20]node_ptr,
          succs [20]node_ptr) -> bool
begin
    var marked, snip bool;
    var left, succ node_ptr = nil, nil;
retry:
    while true do
        left = &pqueue.head;
        for var level = 19; level >= 0; --level do
            var left_next = left.next[level];
            if is_marked(left_next) then goto retry; fi
            var right = left_next;
            while true do
                var right_next = right.next[level];
                while is_marked(right_next) do
                    right = unmark(right_next);
                    right_next = right.next[level];
                od
                if right.priority < priority then
                    left = right;
                    left_next = right_next;
                    right = right_next;
                else
                    break;
                fi
            od
            if left_next != right then
                var success = __builtin_cas(&left.next[level], left_next, right);
                if !success then goto retry; fi
            fi
            preds[level] = left;
            succs[level] = right;
        od
        return succs[0].priority == priority;
    od
end

def mark_pointers(node node_ptr) -> void
begin
  var unmarked_node node_ptr = unmark(node);
  for var level = unmarked_node.toplevel; level >= 0; --level do
    while true do
      var succ node_ptr = unmarked_node.next[level];
      if succ == nil  then break; fi
      var marked = is_marked(succ);
      if marked then break; fi
      var success bool = __builtin_cas(&unmarked_node.next[level], succ, mark(succ));
      if success then break; fi
    od
  od
end

def ref_and_markbit (ptr node_ptr) -> { node_ptr, bool } =
    { unmark(ptr), is_marked(ptr) };

def mark (ptr node_ptr) -> node_ptr =
    cast node_ptr (0x1I64 | cast i64 (ptr));

def unmark (ptr node_ptr) -> node_ptr =
    cast node_ptr (0xFFFFFFFFFFFFFFFEI64 & cast i64 (ptr));

def is_marked (ptr node_ptr) -> bool =
    cast bool (0x1I64 & cast i64 (ptr));
